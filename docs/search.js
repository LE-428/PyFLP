window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "pyflp", "modulename": "pyflp", "qualname": "", "type": "module", "doc": "<p><a href=\"https://pyflp.readthedocs.io/en/latest/?badge=latest\"><img src=\"https://readthedocs.org/projects/pyflp/badge/?version=latest\" alt=\"Documentation Status\" /></a>\n<img src=\"https://img.shields.io/pypi/l/pyflp\" alt=\"PyPI - License\" />\n<img src=\"https://img.shields.io/pypi/v/pyflp?color=blue\" alt=\"PyPI\" /></p>\n\n<h1 id=\"pyflp\">PyFLP</h1>\n\n<p>PyFLP creates an object from an FLP. You can edit it and save it back also. <em>Please don't use this for serious stuffs, I have done minimal testing myself and much of the features are yet to be implemented.</em></p>\n\n<p>It also has useful utilities like:</p>\n\n<ul>\n<li>Creating a ZIP looped package from an FLP</li>\n</ul>\n\n<h2 id=\"usage\">Usage</h2>\n\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">pyflp.parser</span> <span class=\"kn\">import</span> <span class=\"n\">ProjectParser</span>\n<span class=\"n\">project</span> <span class=\"o\">=</span> <span class=\"n\">ProjectParser</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">parse</span><span class=\"p\">(</span><span class=\"s2\">&quot;/path/to/efelpee.flp&quot;</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Use ProjectParser(verbose=True) if you want to see logs</span>\n</code></pre></div>\n\n<h2 id=\"installation\">Installation</h2>\n\n<pre><code>pip install pyflp\n</code></pre>\n\n<h2 id=\"more-about-flp-formatdocsflp-formatmd\"><a href=\"docs/flp-format.md\">More about FLP Format</a></h2>\n\n<h2 id=\"how-does-it-workdocshow-does-it-workmd\"><a href=\"docs/how-does-it-work.md\">How does it work?</a></h2>\n\n<h2 id=\"documentation\">Documentation</h2>\n\n<p>Docs are available on <a href=\"pyflp.rtfd.io\">Read The Docs</a></p>\n\n<h2 id=\"testing\">Testing</h2>\n\n<p>I have created a <a href=\"test_parser.py\">null test</a>. More tests need to be added.</p>\n\n<h2 id=\"thanks\">Thanks</h2>\n\n<p><strong>Monad.FLParser</strong>: https://github.com/monadgroup/FLParser for providing up-to-date parsing logic and the idea of creating an object model</p>\n\n<p><strong>FLPEdit</strong>: https://github.com/roadcrewworker I swear, this library would have remained a dream without this tool. A very helpful program for examining the event structure as it is present in an FLP and value of events. It is very unfortunate that the author has removed it.</p>\n\n<h2 id=\"contributions\">Contributions</h2>\n\n<p>If you can spare some time for testing and/or contributing, I would be very grateful. Please check the <a href=\"../TODO\">TODO</a> as well for current goals/issues. You can reach me at <strong>demberto</strong>[at]<strong>protonmail</strong>[dot]<strong>com</strong> as well :)</p>\n"}, {"fullname": "pyflp.bytesioex", "modulename": "pyflp.bytesioex", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "pyflp.bytesioex.BytesIOEx", "modulename": "pyflp.bytesioex", "qualname": "BytesIOEx", "type": "class", "doc": "<p>C# BinaryReader + BinaryWriter equivalent.</p>\n"}, {"fullname": "pyflp.bytesioex.BytesIOEx.read_bool", "modulename": "pyflp.bytesioex", "qualname": "BytesIOEx.read_bool", "type": "function", "doc": "<p>Reads a C99 _Bool.</p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "pyflp.bytesioex.BytesIOEx.read_int8", "modulename": "pyflp.bytesioex", "qualname": "BytesIOEx.read_int8", "type": "function", "doc": "<p>Reads a 1-byte signed integer.</p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "pyflp.bytesioex.BytesIOEx.read_uint8", "modulename": "pyflp.bytesioex", "qualname": "BytesIOEx.read_uint8", "type": "function", "doc": "<p>Reads a 1-byte unsigned integer.</p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "pyflp.bytesioex.BytesIOEx.read_int16", "modulename": "pyflp.bytesioex", "qualname": "BytesIOEx.read_int16", "type": "function", "doc": "<p>Reads a 2-byte signed integer.</p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "pyflp.bytesioex.BytesIOEx.read_uint16", "modulename": "pyflp.bytesioex", "qualname": "BytesIOEx.read_uint16", "type": "function", "doc": "<p>Reads a 2-byte unsigned integer.</p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "pyflp.bytesioex.BytesIOEx.read_int32", "modulename": "pyflp.bytesioex", "qualname": "BytesIOEx.read_int32", "type": "function", "doc": "<p>Reads a 4-byte signed integer.</p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "pyflp.bytesioex.BytesIOEx.read_uint32", "modulename": "pyflp.bytesioex", "qualname": "BytesIOEx.read_uint32", "type": "function", "doc": "<p>Reads a 4-byte unsigned integer.</p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "pyflp.bytesioex.BytesIOEx.read_int64", "modulename": "pyflp.bytesioex", "qualname": "BytesIOEx.read_int64", "type": "function", "doc": "<p>Reads an 8-byte signed integer.</p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "pyflp.bytesioex.BytesIOEx.read_uint64", "modulename": "pyflp.bytesioex", "qualname": "BytesIOEx.read_uint64", "type": "function", "doc": "<p>Reads an 8-byte unsigned integer.</p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "pyflp.bytesioex.BytesIOEx.read_float", "modulename": "pyflp.bytesioex", "qualname": "BytesIOEx.read_float", "type": "function", "doc": "<p>Reads a 4-byte floating-point number.</p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "pyflp.bytesioex.BytesIOEx.read_double", "modulename": "pyflp.bytesioex", "qualname": "BytesIOEx.read_double", "type": "function", "doc": "<p>Reads an 8-byte floating-point number.</p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "pyflp.bytesioex.BytesIOEx.read_varint", "modulename": "pyflp.bytesioex", "qualname": "BytesIOEx.read_varint", "type": "function", "doc": "<p>Reads a 7bit variable sized encoded integer.</p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "pyflp.bytesioex.BytesIOEx.write_bool", "modulename": "pyflp.bytesioex", "qualname": "BytesIOEx.write_bool", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "value"], "funcdef": "def"}, {"fullname": "pyflp.bytesioex.BytesIOEx.write_int8", "modulename": "pyflp.bytesioex", "qualname": "BytesIOEx.write_int8", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "value"], "funcdef": "def"}, {"fullname": "pyflp.bytesioex.BytesIOEx.write_uint8", "modulename": "pyflp.bytesioex", "qualname": "BytesIOEx.write_uint8", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "value"], "funcdef": "def"}, {"fullname": "pyflp.bytesioex.BytesIOEx.write_int16", "modulename": "pyflp.bytesioex", "qualname": "BytesIOEx.write_int16", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "value"], "funcdef": "def"}, {"fullname": "pyflp.bytesioex.BytesIOEx.write_uint16", "modulename": "pyflp.bytesioex", "qualname": "BytesIOEx.write_uint16", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "value"], "funcdef": "def"}, {"fullname": "pyflp.bytesioex.BytesIOEx.write_int32", "modulename": "pyflp.bytesioex", "qualname": "BytesIOEx.write_int32", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "value"], "funcdef": "def"}, {"fullname": "pyflp.bytesioex.BytesIOEx.write_uint32", "modulename": "pyflp.bytesioex", "qualname": "BytesIOEx.write_uint32", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "value"], "funcdef": "def"}, {"fullname": "pyflp.bytesioex.BytesIOEx.write_int64", "modulename": "pyflp.bytesioex", "qualname": "BytesIOEx.write_int64", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "value"], "funcdef": "def"}, {"fullname": "pyflp.bytesioex.BytesIOEx.write_uint64", "modulename": "pyflp.bytesioex", "qualname": "BytesIOEx.write_uint64", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "value"], "funcdef": "def"}, {"fullname": "pyflp.bytesioex.BytesIOEx.write_float", "modulename": "pyflp.bytesioex", "qualname": "BytesIOEx.write_float", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "value"], "funcdef": "def"}, {"fullname": "pyflp.bytesioex.BytesIOEx.write_double", "modulename": "pyflp.bytesioex", "qualname": "BytesIOEx.write_double", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "value"], "funcdef": "def"}, {"fullname": "pyflp.bytesioex.BytesIOEx.write_varint", "modulename": "pyflp.bytesioex", "qualname": "BytesIOEx.write_varint", "type": "function", "doc": "<p>Converts an unsigned integer to a 7-bit encoded integer (varint) and writes it.</p>\n\n<p>Args:\n    buflen (int): The length of the buffer to be converted.</p>\n", "parameters": ["self", "buflen"], "funcdef": "def"}, {"fullname": "pyflp.conftest", "modulename": "pyflp.conftest", "qualname": "", "type": "module", "doc": "<p>Helps pytest find the module directory.</p>\n"}, {"fullname": "pyflp.event", "modulename": "pyflp.event", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "pyflp.event.byte_event", "modulename": "pyflp.event.byte_event", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "pyflp.event.byte_event.ByteEvent", "modulename": "pyflp.event.byte_event", "qualname": "ByteEvent", "type": "class", "doc": "<p>Represents a byte-sized event.</p>\n\n<p>Raises:\n    ValueError &amp; TypeError</p>\n"}, {"fullname": "pyflp.event.byte_event.ByteEvent.__init__", "modulename": "pyflp.event.byte_event", "qualname": "ByteEvent.__init__", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "id", "data"], "funcdef": "def"}, {"fullname": "pyflp.event.byte_event.ByteEvent.size", "modulename": "pyflp.event.byte_event", "qualname": "ByteEvent.size", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "pyflp.event.byte_event.ByteEvent.dump", "modulename": "pyflp.event.byte_event", "qualname": "ByteEvent.dump", "type": "function", "doc": "<p>Converts python data types into equivalent C types and dumps them to self.data</p>\n", "parameters": ["self", "new_data"], "funcdef": "def"}, {"fullname": "pyflp.event.byte_event.ByteEvent.to_uint8", "modulename": "pyflp.event.byte_event", "qualname": "ByteEvent.to_uint8", "type": "function", "doc": "<p></p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "pyflp.event.byte_event.ByteEvent.to_int8", "modulename": "pyflp.event.byte_event", "qualname": "ByteEvent.to_int8", "type": "function", "doc": "<p></p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "pyflp.event.byte_event.ByteEvent.to_bool", "modulename": "pyflp.event.byte_event", "qualname": "ByteEvent.to_bool", "type": "function", "doc": "<p></p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "pyflp.event.data_event", "modulename": "pyflp.event.data_event", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "pyflp.event.data_event.DataEvent", "modulename": "pyflp.event.data_event", "qualname": "DataEvent", "type": "class", "doc": "<p>Represents a variable sized event used for storing a blob of data,\nconsists of a collection of POD types like int, bool, float, sometimes ASCII strings.\nIts size is determined by the event and also FL version sometimes.\nThe task of parsing is completely handled by one of the FLObject subclasses,\nhence no <code>to_*</code> conversion method is provided.</p>\n\n<pre><code>Raises:\n        TypeError &amp; ValueError\n</code></pre>\n"}, {"fullname": "pyflp.event.data_event.DataEvent.__init__", "modulename": "pyflp.event.data_event", "qualname": "DataEvent.__init__", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "id", "data"], "funcdef": "def"}, {"fullname": "pyflp.event.data_event.DataEvent.dump", "modulename": "pyflp.event.data_event", "qualname": "DataEvent.dump", "type": "function", "doc": "<p>Use this method over directly setting self.data for type-safety.</p>\n", "parameters": ["self", "new_bytes"], "funcdef": "def"}, {"fullname": "pyflp.event.dword_event", "modulename": "pyflp.event.dword_event", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "pyflp.event.dword_event.DWordEvent", "modulename": "pyflp.event.dword_event", "qualname": "DWordEvent", "type": "class", "doc": "<p>Represents a 4 byte event.</p>\n\n<p>Raises:\n    ValueError &amp; TypeError</p>\n"}, {"fullname": "pyflp.event.dword_event.DWordEvent.__init__", "modulename": "pyflp.event.dword_event", "qualname": "DWordEvent.__init__", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "id", "data"], "funcdef": "def"}, {"fullname": "pyflp.event.dword_event.DWordEvent.size", "modulename": "pyflp.event.dword_event", "qualname": "DWordEvent.size", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "pyflp.event.dword_event.DWordEvent.dump", "modulename": "pyflp.event.dword_event", "qualname": "DWordEvent.dump", "type": "function", "doc": "<p>Converts python data types into equivalent C types and dumps them to self.data</p>\n", "parameters": ["self", "new_data"], "funcdef": "def"}, {"fullname": "pyflp.event.dword_event.DWordEvent.to_uint32", "modulename": "pyflp.event.dword_event", "qualname": "DWordEvent.to_uint32", "type": "function", "doc": "<p></p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "pyflp.event.dword_event.DWordEvent.to_int32", "modulename": "pyflp.event.dword_event", "qualname": "DWordEvent.to_int32", "type": "function", "doc": "<p></p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "pyflp.event.event", "modulename": "pyflp.event.event", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "pyflp.event.event.Event", "modulename": "pyflp.event.event", "qualname": "Event", "type": "class", "doc": "<p>Abstract base class which represents an event.</p>\n"}, {"fullname": "pyflp.event.event.Event.size", "modulename": "pyflp.event.event", "qualname": "Event.size", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "pyflp.event.event.Event.dump", "modulename": "pyflp.event.event", "qualname": "Event.dump", "type": "function", "doc": "<p>Converts python data types into equivalent C types and dumps them to self.data</p>\n", "parameters": ["self", "new_data"], "funcdef": "def"}, {"fullname": "pyflp.event.event.Event.to_raw", "modulename": "pyflp.event.event", "qualname": "Event.to_raw", "type": "function", "doc": "<p>Used by Project.save(). Overriden by _VariabledSizedEvent</p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "pyflp.event.event.VariableSizedEvent", "modulename": "pyflp.event.event", "qualname": "VariableSizedEvent", "type": "class", "doc": "<p>Implements Event.size and Event.to_raw() for TextEvent and DataEvent</p>\n"}, {"fullname": "pyflp.event.event.VariableSizedEvent.size", "modulename": "pyflp.event.event", "qualname": "VariableSizedEvent.size", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "pyflp.event.event.VariableSizedEvent.to_raw", "modulename": "pyflp.event.event", "qualname": "VariableSizedEvent.to_raw", "type": "function", "doc": "<p>Used by Project.save(). Overriden by _VariabledSizedEvent</p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "pyflp.event.text_event", "modulename": "pyflp.event.text_event", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "pyflp.event.text_event.TextEvent", "modulename": "pyflp.event.text_event", "qualname": "TextEvent", "type": "class", "doc": "<p>Represents a variable sized event used for storing strings.</p>\n\n<p>Raises:\n        TypeError</p>\n"}, {"fullname": "pyflp.event.text_event.TextEvent.__init__", "modulename": "pyflp.event.text_event", "qualname": "TextEvent.__init__", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "id", "data"], "funcdef": "def"}, {"fullname": "pyflp.event.text_event.TextEvent.uses_unicode", "modulename": "pyflp.event.text_event", "qualname": "TextEvent.uses_unicode", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "pyflp.event.text_event.TextEvent.dump", "modulename": "pyflp.event.text_event", "qualname": "TextEvent.dump", "type": "function", "doc": "<p>Converts python data types into equivalent C types and dumps them to self.data</p>\n", "parameters": ["self", "new_str"], "funcdef": "def"}, {"fullname": "pyflp.event.text_event.TextEvent.to_str", "modulename": "pyflp.event.text_event", "qualname": "TextEvent.to_str", "type": "function", "doc": "<p></p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "pyflp.event.word_event", "modulename": "pyflp.event.word_event", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "pyflp.event.word_event.WordEvent", "modulename": "pyflp.event.word_event", "qualname": "WordEvent", "type": "class", "doc": "<p>Represents a 2 byte event.</p>\n\n<p>Raises:\n    ValueError &amp; TypeError</p>\n"}, {"fullname": "pyflp.event.word_event.WordEvent.__init__", "modulename": "pyflp.event.word_event", "qualname": "WordEvent.__init__", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "id", "data"], "funcdef": "def"}, {"fullname": "pyflp.event.word_event.WordEvent.size", "modulename": "pyflp.event.word_event", "qualname": "WordEvent.size", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "pyflp.event.word_event.WordEvent.dump", "modulename": "pyflp.event.word_event", "qualname": "WordEvent.dump", "type": "function", "doc": "<p>Converts python data types into equivalent C types and dumps them to self.data</p>\n", "parameters": ["self", "new_data"], "funcdef": "def"}, {"fullname": "pyflp.event.word_event.WordEvent.to_uint16", "modulename": "pyflp.event.word_event", "qualname": "WordEvent.to_uint16", "type": "function", "doc": "<p></p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "pyflp.event.word_event.WordEvent.to_int16", "modulename": "pyflp.event.word_event", "qualname": "WordEvent.to_int16", "type": "function", "doc": "<p></p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "pyflp.flobject", "modulename": "pyflp.flobject", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "pyflp.flobject.arrangement", "modulename": "pyflp.flobject.arrangement", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "pyflp.flobject.arrangement.arrangement", "modulename": "pyflp.flobject.arrangement.arrangement", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "pyflp.flobject.arrangement.arrangement.Arrangement", "modulename": "pyflp.flobject.arrangement.arrangement", "qualname": "Arrangement", "type": "class", "doc": "<p>Abstract base class for the FLP object model.</p>\n\n<p>Rules for subclassing:</p>\n\n<ol>\n<li>__init__() should call super().__init__() before anything</li>\n<li>Use self._log for logging, no module-level logging</li>\n<li>Set <code>_count</code> = 0</li>\n<li>Set <code>max_count</code> wherever applicable</li>\n</ol>\n"}, {"fullname": "pyflp.flobject.arrangement.arrangement.Arrangement.__init__", "modulename": "pyflp.flobject.arrangement.arrangement", "qualname": "Arrangement.__init__", "type": "function", "doc": "<p></p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "pyflp.flobject.arrangement.arrangement.Arrangement.name", "modulename": "pyflp.flobject.arrangement.arrangement", "qualname": "Arrangement.name", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "pyflp.flobject.arrangement.arrangement.Arrangement.index", "modulename": "pyflp.flobject.arrangement.arrangement", "qualname": "Arrangement.index", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "pyflp.flobject.arrangement.arrangement.Arrangement.tracks", "modulename": "pyflp.flobject.arrangement.arrangement", "qualname": "Arrangement.tracks", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "pyflp.flobject.arrangement.arrangement.Arrangement.playlist", "modulename": "pyflp.flobject.arrangement.arrangement", "qualname": "Arrangement.playlist", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "pyflp.flobject.arrangement.arrangement.Arrangement.timemarkers", "modulename": "pyflp.flobject.arrangement.arrangement", "qualname": "Arrangement.timemarkers", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "pyflp.flobject.arrangement.arrangement.Arrangement.parse", "modulename": "pyflp.flobject.arrangement.arrangement", "qualname": "Arrangement.parse", "type": "function", "doc": "<p>Adds and parses an event from the event store.</p>\n\n<p>Uses delegate methods <code>_parse_byte_event</code>, <code>_parse_word_event</code>,\n<code>_parse_dword_event</code>, <code>_parse_text_event</code> and <code>_parse_data_event</code>.</p>\n\n<p>Can be overriden when a derived class contains properties holding\nFLObject derived classes, for e.g. <code>pyflp.flobject.insert.insert.Insert.slots</code>\nholds <code>List[pyflp.flobject.insert.insert_slot.InsertSlot]</code> and whenever the\nevent ID belongs to <code>pyflp.flobject.insert.event_id.InsertSlotEventID</code>,\nit is passed to the slot's <code>parse()</code> method directly.</p>\n\n<p>Args:\n    event (Event): Event to send to <code>parseprop</code>.</p>\n", "parameters": ["self", "event"], "funcdef": "def"}, {"fullname": "pyflp.flobject.arrangement.arrangement.Arrangement.save", "modulename": "pyflp.flobject.arrangement.arrangement", "qualname": "Arrangement.save", "type": "function", "doc": "<p>Returns the events stored in <code>_events</code>.</p>\n\n<p>When overriden a List should be returned instead of ValuesView.</p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "pyflp.flobject.arrangement.event_id", "modulename": "pyflp.flobject.arrangement.event_id", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "pyflp.flobject.arrangement.event_id.ArrangementEventID", "modulename": "pyflp.flobject.arrangement.event_id", "qualname": "ArrangementEventID", "type": "class", "doc": "<p>An enumeration.</p>\n"}, {"fullname": "pyflp.flobject.arrangement.event_id.ArrangementEventID.Name", "modulename": "pyflp.flobject.arrangement.event_id", "qualname": "ArrangementEventID.Name", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "pyflp.flobject.arrangement.event_id.ArrangementEventID.Index", "modulename": "pyflp.flobject.arrangement.event_id", "qualname": "ArrangementEventID.Index", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "pyflp.flobject.arrangement.event_id.PlaylistEventID", "modulename": "pyflp.flobject.arrangement.event_id", "qualname": "PlaylistEventID", "type": "class", "doc": "<p>An enumeration.</p>\n"}, {"fullname": "pyflp.flobject.arrangement.event_id.PlaylistEventID.Events", "modulename": "pyflp.flobject.arrangement.event_id", "qualname": "PlaylistEventID.Events", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "pyflp.flobject.arrangement.event_id.TimeMarkerEventID", "modulename": "pyflp.flobject.arrangement.event_id", "qualname": "TimeMarkerEventID", "type": "class", "doc": "<p>An enumeration.</p>\n"}, {"fullname": "pyflp.flobject.arrangement.event_id.TimeMarkerEventID.Position", "modulename": "pyflp.flobject.arrangement.event_id", "qualname": "TimeMarkerEventID.Position", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "pyflp.flobject.arrangement.event_id.TimeMarkerEventID.Numerator", "modulename": "pyflp.flobject.arrangement.event_id", "qualname": "TimeMarkerEventID.Numerator", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "pyflp.flobject.arrangement.event_id.TimeMarkerEventID.Denominator", "modulename": "pyflp.flobject.arrangement.event_id", "qualname": "TimeMarkerEventID.Denominator", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "pyflp.flobject.arrangement.event_id.TimeMarkerEventID.Name", "modulename": "pyflp.flobject.arrangement.event_id", "qualname": "TimeMarkerEventID.Name", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "pyflp.flobject.arrangement.event_id.TrackEventID", "modulename": "pyflp.flobject.arrangement.event_id", "qualname": "TrackEventID", "type": "class", "doc": "<p>An enumeration.</p>\n"}, {"fullname": "pyflp.flobject.arrangement.event_id.TrackEventID.Name", "modulename": "pyflp.flobject.arrangement.event_id", "qualname": "TrackEventID.Name", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "pyflp.flobject.arrangement.event_id.TrackEventID.Data", "modulename": "pyflp.flobject.arrangement.event_id", "qualname": "TrackEventID.Data", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "pyflp.flobject.arrangement.playlist", "modulename": "pyflp.flobject.arrangement.playlist", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "pyflp.flobject.arrangement.playlist.Playlist", "modulename": "pyflp.flobject.arrangement.playlist", "qualname": "Playlist", "type": "class", "doc": "<p>Abstract base class for the FLP object model.</p>\n\n<p>Rules for subclassing:</p>\n\n<ol>\n<li>__init__() should call super().__init__() before anything</li>\n<li>Use self._log for logging, no module-level logging</li>\n<li>Set <code>_count</code> = 0</li>\n<li>Set <code>max_count</code> wherever applicable</li>\n</ol>\n"}, {"fullname": "pyflp.flobject.arrangement.playlist.Playlist.__init__", "modulename": "pyflp.flobject.arrangement.playlist", "qualname": "Playlist.__init__", "type": "function", "doc": "<p></p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "pyflp.flobject.arrangement.playlist.Playlist.ppq", "modulename": "pyflp.flobject.arrangement.playlist", "qualname": "Playlist.ppq", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "pyflp.flobject.arrangement.playlist.Playlist.max_count", "modulename": "pyflp.flobject.arrangement.playlist", "qualname": "Playlist.max_count", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "pyflp.flobject.arrangement.playlist.Playlist.save", "modulename": "pyflp.flobject.arrangement.playlist", "qualname": "Playlist.save", "type": "function", "doc": "<p>Returns the events stored in <code>_events</code>.</p>\n\n<p>When overriden a List should be returned instead of ValuesView.</p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "pyflp.flobject.arrangement.timemarker", "modulename": "pyflp.flobject.arrangement.timemarker", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "pyflp.flobject.arrangement.timemarker.TimeMarker", "modulename": "pyflp.flobject.arrangement.timemarker", "qualname": "TimeMarker", "type": "class", "doc": "<p>Abstract base class for the FLP object model.</p>\n\n<p>Rules for subclassing:</p>\n\n<ol>\n<li>__init__() should call super().__init__() before anything</li>\n<li>Use self._log for logging, no module-level logging</li>\n<li>Set <code>_count</code> = 0</li>\n<li>Set <code>max_count</code> wherever applicable</li>\n</ol>\n"}, {"fullname": "pyflp.flobject.arrangement.timemarker.TimeMarker.__init__", "modulename": "pyflp.flobject.arrangement.timemarker", "qualname": "TimeMarker.__init__", "type": "function", "doc": "<p></p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "pyflp.flobject.arrangement.timemarker.TimeMarker.name", "modulename": "pyflp.flobject.arrangement.timemarker", "qualname": "TimeMarker.name", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "pyflp.flobject.arrangement.timemarker.TimeMarker.position", "modulename": "pyflp.flobject.arrangement.timemarker", "qualname": "TimeMarker.position", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "pyflp.flobject.arrangement.timemarker.TimeMarker.numerator", "modulename": "pyflp.flobject.arrangement.timemarker", "qualname": "TimeMarker.numerator", "type": "variable", "doc": "<p>Possible values: 1-16</p>\n"}, {"fullname": "pyflp.flobject.arrangement.timemarker.TimeMarker.denominator", "modulename": "pyflp.flobject.arrangement.timemarker", "qualname": "TimeMarker.denominator", "type": "variable", "doc": "<p>Possible values: 2, 4, 8, 16</p>\n"}, {"fullname": "pyflp.flobject.arrangement.timemarker.TimeMarker.save", "modulename": "pyflp.flobject.arrangement.timemarker", "qualname": "TimeMarker.save", "type": "function", "doc": "<p>Returns the events stored in <code>_events</code>.</p>\n\n<p>When overriden a List should be returned instead of ValuesView.</p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "pyflp.flobject.arrangement.track", "modulename": "pyflp.flobject.arrangement.track", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "pyflp.flobject.arrangement.track.Track", "modulename": "pyflp.flobject.arrangement.track", "qualname": "Track", "type": "class", "doc": "<p>Abstract base class for the FLP object model.</p>\n\n<p>Rules for subclassing:</p>\n\n<ol>\n<li>__init__() should call super().__init__() before anything</li>\n<li>Use self._log for logging, no module-level logging</li>\n<li>Set <code>_count</code> = 0</li>\n<li>Set <code>max_count</code> wherever applicable</li>\n</ol>\n"}, {"fullname": "pyflp.flobject.arrangement.track.Track.__init__", "modulename": "pyflp.flobject.arrangement.track", "qualname": "Track.__init__", "type": "function", "doc": "<p></p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "pyflp.flobject.arrangement.track.Track.max_count", "modulename": "pyflp.flobject.arrangement.track", "qualname": "Track.max_count", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "pyflp.flobject.arrangement.track.Track.name", "modulename": "pyflp.flobject.arrangement.track", "qualname": "Track.name", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "pyflp.flobject.arrangement.track.Track.index", "modulename": "pyflp.flobject.arrangement.track", "qualname": "Track.index", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "pyflp.flobject.arrangement.track.Track.color", "modulename": "pyflp.flobject.arrangement.track", "qualname": "Track.color", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "pyflp.flobject.arrangement.track.Track.icon", "modulename": "pyflp.flobject.arrangement.track", "qualname": "Track.icon", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "pyflp.flobject.arrangement.track.Track.enabled", "modulename": "pyflp.flobject.arrangement.track", "qualname": "Track.enabled", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "pyflp.flobject.arrangement.track.Track.height", "modulename": "pyflp.flobject.arrangement.track", "qualname": "Track.height", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "pyflp.flobject.arrangement.track.Track.locked_height", "modulename": "pyflp.flobject.arrangement.track", "qualname": "Track.locked_height", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "pyflp.flobject.arrangement.track.Track.locked_to_content", "modulename": "pyflp.flobject.arrangement.track", "qualname": "Track.locked_to_content", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "pyflp.flobject.arrangement.track.Track.motion", "modulename": "pyflp.flobject.arrangement.track", "qualname": "Track.motion", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "pyflp.flobject.arrangement.track.Track.press", "modulename": "pyflp.flobject.arrangement.track", "qualname": "Track.press", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "pyflp.flobject.arrangement.track.Track.trigger_sync", "modulename": "pyflp.flobject.arrangement.track", "qualname": "Track.trigger_sync", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "pyflp.flobject.arrangement.track.Track.queued", "modulename": "pyflp.flobject.arrangement.track", "qualname": "Track.queued", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "pyflp.flobject.arrangement.track.Track.tolerant", "modulename": "pyflp.flobject.arrangement.track", "qualname": "Track.tolerant", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "pyflp.flobject.arrangement.track.Track.position_sync", "modulename": "pyflp.flobject.arrangement.track", "qualname": "Track.position_sync", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "pyflp.flobject.arrangement.track.Track.grouped_with_above", "modulename": "pyflp.flobject.arrangement.track", "qualname": "Track.grouped_with_above", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "pyflp.flobject.arrangement.track.Track.locked", "modulename": "pyflp.flobject.arrangement.track", "qualname": "Track.locked", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "pyflp.flobject.arrangement.track.Track.items", "modulename": "pyflp.flobject.arrangement.track", "qualname": "Track.items", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "pyflp.flobject.arrangement.track.Track.save", "modulename": "pyflp.flobject.arrangement.track", "qualname": "Track.save", "type": "function", "doc": "<p>Returns the events stored in <code>_events</code>.</p>\n\n<p>When overriden a List should be returned instead of ValuesView.</p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "pyflp.flobject.channel", "modulename": "pyflp.flobject.channel", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "pyflp.flobject.channel.channel", "modulename": "pyflp.flobject.channel.channel", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "pyflp.flobject.channel.channel.Channel", "modulename": "pyflp.flobject.channel.channel", "qualname": "Channel", "type": "class", "doc": "<p>Abstract base class for the FLP object model.</p>\n\n<p>Rules for subclassing:</p>\n\n<ol>\n<li>__init__() should call super().__init__() before anything</li>\n<li>Use self._log for logging, no module-level logging</li>\n<li>Set <code>_count</code> = 0</li>\n<li>Set <code>max_count</code> wherever applicable</li>\n</ol>\n"}, {"fullname": "pyflp.flobject.channel.channel.Channel.__init__", "modulename": "pyflp.flobject.channel.channel", "qualname": "Channel.__init__", "type": "function", "doc": "<p></p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "pyflp.flobject.channel.channel.Channel.max_count", "modulename": "pyflp.flobject.channel.channel", "qualname": "Channel.max_count", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "pyflp.flobject.channel.channel.Channel.default_name", "modulename": "pyflp.flobject.channel.channel", "qualname": "Channel.default_name", "type": "variable", "doc": "<p>Default name of the channel. Default event is stored.\nThe value of this depends on the type of <code>plugin</code>:</p>\n\n<ul>\n<li>Native (stock) plugin: The name obtained from the plugin is stored.</li>\n<li>VST plugin (VSTi): 'Fruity Wrapper'.</li>\n</ul>\n\n<p>See <code>name</code> also.</p>\n"}, {"fullname": "pyflp.flobject.channel.channel.Channel.index", "modulename": "pyflp.flobject.channel.channel", "qualname": "Channel.index", "type": "variable", "doc": "<p>Index of the channel, should be no more than :attr:<code>Misc.channel_count</code></p>\n"}, {"fullname": "pyflp.flobject.channel.channel.Channel.volume", "modulename": "pyflp.flobject.channel.channel", "qualname": "Channel.volume", "type": "variable", "doc": "<p>Volume of the channel. Default event is stored.</p>\n"}, {"fullname": "pyflp.flobject.channel.channel.Channel.pan", "modulename": "pyflp.flobject.channel.channel", "qualname": "Channel.pan", "type": "variable", "doc": "<p>Panning of the channel. Default event is stored.</p>\n"}, {"fullname": "pyflp.flobject.channel.channel.Channel.color", "modulename": "pyflp.flobject.channel.channel", "qualname": "Channel.color", "type": "variable", "doc": "<p>Color of the channel. Default event is stored.</p>\n"}, {"fullname": "pyflp.flobject.channel.channel.Channel.target_insert", "modulename": "pyflp.flobject.channel.channel", "qualname": "Channel.target_insert", "type": "variable", "doc": "<p>The index of the :type:<code>Insert</code> the channel is routed to.\nAllowed values: -1 to :attr:<code>Insert.max_count</code>.</p>\n"}, {"fullname": "pyflp.flobject.channel.channel.Channel.kind", "modulename": "pyflp.flobject.channel.channel", "qualname": "Channel.kind", "type": "variable", "doc": "<p>Type of channel. See :type:<code>ChannelKind</code> for the various types.</p>\n"}, {"fullname": "pyflp.flobject.channel.channel.Channel.enabled", "modulename": "pyflp.flobject.channel.channel", "qualname": "Channel.enabled", "type": "variable", "doc": "<p>Whether the channel is enabled in the channel rack.</p>\n"}, {"fullname": "pyflp.flobject.channel.channel.Channel.locked", "modulename": "pyflp.flobject.channel.channel", "qualname": "Channel.locked", "type": "variable", "doc": "<p>Whether the channel is locked in the channel rack.\nPaired with the :attr:<code>~Channel.enabled</code>, it represents the actual state of the channel.</p>\n"}, {"fullname": "pyflp.flobject.channel.channel.Channel.zipped", "modulename": "pyflp.flobject.channel.channel", "qualname": "Channel.zipped", "type": "variable", "doc": "<p>Whether the channel is zipped in the channel rack.</p>\n"}, {"fullname": "pyflp.flobject.channel.channel.Channel.root_note", "modulename": "pyflp.flobject.channel.channel", "qualname": "Channel.root_note", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "pyflp.flobject.channel.channel.Channel.icon", "modulename": "pyflp.flobject.channel.channel", "qualname": "Channel.icon", "type": "variable", "doc": "<p>Icon of the channel.</p>\n"}, {"fullname": "pyflp.flobject.channel.channel.Channel.sample_path", "modulename": "pyflp.flobject.channel.channel", "qualname": "Channel.sample_path", "type": "variable", "doc": "<p>The path to the sample file on the disk. Valid only if\n:attr:<code>~Channel.kind</code> is :attr:<code>~ChannelKind.Sampler</code> or :attr:<code>~ChannelKind.Audio</code>.</p>\n"}, {"fullname": "pyflp.flobject.channel.channel.Channel.filter_channel", "modulename": "pyflp.flobject.channel.channel", "qualname": "Channel.filter_channel", "type": "variable", "doc": "<p>The channel display filter (a.k.a :type:<code>FilterChannel</code>) under which channel is grouped.</p>\n"}, {"fullname": "pyflp.flobject.channel.channel.Channel.plugin", "modulename": "pyflp.flobject.channel.channel", "qualname": "Channel.plugin", "type": "variable", "doc": "<p>The :type:<code>Plugin</code> associated with the channel.\nValid only if :attr:<code>~Channel.kind</code> is :attr:<code>~ChannelKind.Instrument</code>.</p>\n"}, {"fullname": "pyflp.flobject.channel.channel.Channel.children", "modulename": "pyflp.flobject.channel.channel", "qualname": "Channel.children", "type": "variable", "doc": "<p>List of children :attr:<code>~Channel.index</code>es of a Layer.\nValid only if :attr:<code>~Channel.kind</code> is :attr:<code>~ChannelKind.Layer</code>.</p>\n"}, {"fullname": "pyflp.flobject.channel.channel.Channel.fx", "modulename": "pyflp.flobject.channel.channel", "qualname": "Channel.fx", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "pyflp.flobject.channel.channel.Channel.name", "modulename": "pyflp.flobject.channel.channel", "qualname": "Channel.name", "type": "variable", "doc": "<p>The value of this depends on the type of <code>plugin</code>:</p>\n\n<ul>\n<li>Native (stock) plugin: User-given name. Default event is not stored.</li>\n<li>VST plugin (VSTi): The name obtained from the VST, or the user-given name.\nDefault event (i.e VST plugin name) is stored.</li>\n</ul>\n\n<p>See <code>default_name</code> also.</p>\n"}, {"fullname": "pyflp.flobject.channel.channel.Channel.parse", "modulename": "pyflp.flobject.channel.channel", "qualname": "Channel.parse", "type": "function", "doc": "<p>Adds and parses an event from the event store.</p>\n\n<p>Uses delegate methods <code>_parse_byte_event</code>, <code>_parse_word_event</code>,\n<code>_parse_dword_event</code>, <code>_parse_text_event</code> and <code>_parse_data_event</code>.</p>\n\n<p>Can be overriden when a derived class contains properties holding\nFLObject derived classes, for e.g. <code>pyflp.flobject.insert.insert.Insert.slots</code>\nholds <code>List[pyflp.flobject.insert.insert_slot.InsertSlot]</code> and whenever the\nevent ID belongs to <code>pyflp.flobject.insert.event_id.InsertSlotEventID</code>,\nit is passed to the slot's <code>parse()</code> method directly.</p>\n\n<p>Args:\n    event (Event): Event to send to <code>parseprop</code>.</p>\n", "parameters": ["self", "event"], "funcdef": "def"}, {"fullname": "pyflp.flobject.channel.channel.Channel.save", "modulename": "pyflp.flobject.channel.channel", "qualname": "Channel.save", "type": "function", "doc": "<p>Returns the events stored in <code>_events</code>.</p>\n\n<p>When overriden a List should be returned instead of ValuesView.</p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "pyflp.flobject.channel.channel_fx", "modulename": "pyflp.flobject.channel.channel_fx", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "pyflp.flobject.channel.channel_fx.ChannelFX", "modulename": "pyflp.flobject.channel.channel_fx", "qualname": "ChannelFX", "type": "class", "doc": "<p>Contains FX properties related to a Sampler/Audio channel.</p>\n\n<p>Used by <code>pyflp.flobject.channel.channel.Channel.fx</code>.</p>\n"}, {"fullname": "pyflp.flobject.channel.channel_fx.ChannelFX.__init__", "modulename": "pyflp.flobject.channel.channel_fx", "qualname": "ChannelFX.__init__", "type": "function", "doc": "<p></p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "pyflp.flobject.channel.channel_fx.ChannelFX.pre_amp", "modulename": "pyflp.flobject.channel.channel_fx", "qualname": "ChannelFX.pre_amp", "type": "variable", "doc": "<p>Sampler -> Pre-computed effects -> Boost.</p>\n"}, {"fullname": "pyflp.flobject.channel.channel_fx.ChannelFX.stereo_delay", "modulename": "pyflp.flobject.channel.channel_fx", "qualname": "ChannelFX.stereo_delay", "type": "variable", "doc": "<p>Sampler -> Pre-computed effects -> Stereo Delay.</p>\n"}, {"fullname": "pyflp.flobject.channel.channel_fx.ChannelFX.reverb", "modulename": "pyflp.flobject.channel.channel_fx", "qualname": "ChannelFX.reverb", "type": "variable", "doc": "<p>Sampler -> Pre-computed effects -> Reverb.</p>\n"}, {"fullname": "pyflp.flobject.channel.event_id", "modulename": "pyflp.flobject.channel.event_id", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "pyflp.flobject.channel.event_id.ChannelEventID", "modulename": "pyflp.flobject.channel.event_id", "qualname": "ChannelEventID", "type": "class", "doc": "<p>Event IDs used by <code>Channel</code>.</p>\n"}, {"fullname": "pyflp.flobject.channel.event_id.ChannelEventID.Enabled", "modulename": "pyflp.flobject.channel.event_id", "qualname": "ChannelEventID.Enabled", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "pyflp.flobject.channel.event_id.ChannelEventID.Zipped", "modulename": "pyflp.flobject.channel.event_id", "qualname": "ChannelEventID.Zipped", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "pyflp.flobject.channel.event_id.ChannelEventID.Kind", "modulename": "pyflp.flobject.channel.event_id", "qualname": "ChannelEventID.Kind", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "pyflp.flobject.channel.event_id.ChannelEventID.TargetInsert", "modulename": "pyflp.flobject.channel.event_id", "qualname": "ChannelEventID.TargetInsert", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "pyflp.flobject.channel.event_id.ChannelEventID.Locked", "modulename": "pyflp.flobject.channel.event_id", "qualname": "ChannelEventID.Locked", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "pyflp.flobject.channel.event_id.ChannelEventID.New", "modulename": "pyflp.flobject.channel.event_id", "qualname": "ChannelEventID.New", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "pyflp.flobject.channel.event_id.ChannelEventID.Volume", "modulename": "pyflp.flobject.channel.event_id", "qualname": "ChannelEventID.Volume", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "pyflp.flobject.channel.event_id.ChannelEventID.Pan", "modulename": "pyflp.flobject.channel.event_id", "qualname": "ChannelEventID.Pan", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "pyflp.flobject.channel.event_id.ChannelEventID.LayerChildren", "modulename": "pyflp.flobject.channel.event_id", "qualname": "ChannelEventID.LayerChildren", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "pyflp.flobject.channel.event_id.ChannelEventID.Color", "modulename": "pyflp.flobject.channel.event_id", "qualname": "ChannelEventID.Color", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "pyflp.flobject.channel.event_id.ChannelEventID.RootNote", "modulename": "pyflp.flobject.channel.event_id", "qualname": "ChannelEventID.RootNote", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "pyflp.flobject.channel.event_id.ChannelEventID.FilterChannelNum", "modulename": "pyflp.flobject.channel.event_id", "qualname": "ChannelEventID.FilterChannelNum", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "pyflp.flobject.channel.event_id.ChannelEventID.Icon", "modulename": "pyflp.flobject.channel.event_id", "qualname": "ChannelEventID.Icon", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "pyflp.flobject.channel.event_id.ChannelEventID.DefaultName", "modulename": "pyflp.flobject.channel.event_id", "qualname": "ChannelEventID.DefaultName", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "pyflp.flobject.channel.event_id.ChannelEventID.SamplePath", "modulename": "pyflp.flobject.channel.event_id", "qualname": "ChannelEventID.SamplePath", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "pyflp.flobject.channel.event_id.ChannelEventID.GeneratorName", "modulename": "pyflp.flobject.channel.event_id", "qualname": "ChannelEventID.GeneratorName", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "pyflp.flobject.channel.event_id.ChannelEventID.Plugin", "modulename": "pyflp.flobject.channel.event_id", "qualname": "ChannelEventID.Plugin", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "pyflp.flobject.channel.event_id.ChannelFXEventID", "modulename": "pyflp.flobject.channel.event_id", "qualname": "ChannelFXEventID", "type": "class", "doc": "<p>An enumeration.</p>\n"}, {"fullname": "pyflp.flobject.channel.event_id.ChannelFXEventID.PreAmp", "modulename": "pyflp.flobject.channel.event_id", "qualname": "ChannelFXEventID.PreAmp", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "pyflp.flobject.channel.event_id.ChannelFXEventID.StereoDelay", "modulename": "pyflp.flobject.channel.event_id", "qualname": "ChannelFXEventID.StereoDelay", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "pyflp.flobject.channel.event_id.ChannelFXEventID.Reverb", "modulename": "pyflp.flobject.channel.event_id", "qualname": "ChannelFXEventID.Reverb", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "pyflp.flobject.channel.event_id.FilterChannelEventID", "modulename": "pyflp.flobject.channel.event_id", "qualname": "FilterChannelEventID", "type": "class", "doc": "<p>Event IDs used by <code>FilterChannel</code>.</p>\n"}, {"fullname": "pyflp.flobject.channel.event_id.FilterChannelEventID.Name", "modulename": "pyflp.flobject.channel.event_id", "qualname": "FilterChannelEventID.Name", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "pyflp.flobject.channel.filterchannel", "modulename": "pyflp.flobject.channel.filterchannel", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "pyflp.flobject.channel.filterchannel.FilterChannel", "modulename": "pyflp.flobject.channel.filterchannel", "qualname": "FilterChannel", "type": "class", "doc": "<p>Channel display filter. Default: 'Unsorted', 'Audio' and 'Automation'.</p>\n\n<p>Used by <code>pyflp.flobject.channel.channel.Channel.filter_channel</code>.</p>\n"}, {"fullname": "pyflp.flobject.channel.filterchannel.FilterChannel.__init__", "modulename": "pyflp.flobject.channel.filterchannel", "qualname": "FilterChannel.__init__", "type": "function", "doc": "<p></p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "pyflp.flobject.channel.filterchannel.FilterChannel.name", "modulename": "pyflp.flobject.channel.filterchannel", "qualname": "FilterChannel.name", "type": "variable", "doc": "<p>Name of the filter channel.</p>\n"}, {"fullname": "pyflp.flobject.channel.filterchannel.FilterChannel.save", "modulename": "pyflp.flobject.channel.filterchannel", "qualname": "FilterChannel.save", "type": "function", "doc": "<p>Returns the events stored in <code>_events</code>.</p>\n\n<p>When overriden a List should be returned instead of ValuesView.</p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "pyflp.flobject.flobject", "modulename": "pyflp.flobject.flobject", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "pyflp.flobject.flobject.FLObject", "modulename": "pyflp.flobject.flobject", "qualname": "FLObject", "type": "class", "doc": "<p>Abstract base class for the FLP object model.</p>\n\n<p>Rules for subclassing:</p>\n\n<ol>\n<li>__init__() should call super().__init__() before anything</li>\n<li>Use self._log for logging, no module-level logging</li>\n<li>Set <code>_count</code> = 0</li>\n<li>Set <code>max_count</code> wherever applicable</li>\n</ol>\n"}, {"fullname": "pyflp.flobject.flobject.FLObject.__init__", "modulename": "pyflp.flobject.flobject", "qualname": "FLObject.__init__", "type": "function", "doc": "<p></p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "pyflp.flobject.flobject.FLObject.fl_version", "modulename": "pyflp.flobject.flobject", "qualname": "FLObject.fl_version", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "pyflp.flobject.flobject.FLObject.setprop", "modulename": "pyflp.flobject.flobject", "qualname": "FLObject.setprop", "type": "function", "doc": "<p>Reduces property setter boilerplate.</p>\n\n<ol>\n<li>Gets corresponding event from event store.</li>\n<li>Dumps the value to that event.</li>\n<li>Assigns the local variable the value.</li>\n</ol>\n\n<p>Don't use this for <code>pyflp.event.data_event.DataEvent</code> properties!</p>\n\n<p>Args:\n    name (str): Name of the property\n    value (Any): Value to assign to property and dump in event store</p>\n", "parameters": ["self", "name", "value"], "funcdef": "def"}, {"fullname": "pyflp.flobject.flobject.FLObject.parse", "modulename": "pyflp.flobject.flobject", "qualname": "FLObject.parse", "type": "function", "doc": "<p>Adds and parses an event from the event store.</p>\n\n<p>Uses delegate methods <code>_parse_byte_event</code>, <code>_parse_word_event</code>,\n<code>_parse_dword_event</code>, <code>_parse_text_event</code> and <code>_parse_data_event</code>.</p>\n\n<p>Can be overriden when a derived class contains properties holding\nFLObject derived classes, for e.g. <code>pyflp.flobject.insert.insert.Insert.slots</code>\nholds <code>List[pyflp.flobject.insert.insert_slot.InsertSlot]</code> and whenever the\nevent ID belongs to <code>pyflp.flobject.insert.event_id.InsertSlotEventID</code>,\nit is passed to the slot's <code>parse()</code> method directly.</p>\n\n<p>Args:\n    event (Event): Event to send to <code>parseprop</code>.</p>\n", "parameters": ["self", "event"], "funcdef": "def"}, {"fullname": "pyflp.flobject.flobject.FLObject.parseprop", "modulename": "pyflp.flobject.flobject", "qualname": "FLObject.parseprop", "type": "function", "doc": "<p>Reduces boilerplate for <code>parse()</code> delegate methods.</p>\n\n<p>The name of the local variable and the dictionary key must be equal.</p>\n\n<p>Args:\n    event (Event): Event to parse and add to event store <code>_events</code>.\n    key (str): Dictionary key, provided that '_' + key == <em>name_of_local_variable</em>.\n    value (Any): Value to assign to the local variable.</p>\n\n<p>Not to be used directly unless the helper <code>parse_*_prop</code> methods don't help.</p>\n", "parameters": ["self", "event", "key", "value"], "funcdef": "def"}, {"fullname": "pyflp.flobject.flobject.FLObject.parse_bool_prop", "modulename": "pyflp.flobject.flobject", "qualname": "FLObject.parse_bool_prop", "type": "function", "doc": "<p><code>parseprop</code> for boolean properties.</p>\n", "parameters": ["self", "event", "key"], "funcdef": "def"}, {"fullname": "pyflp.flobject.flobject.FLObject.parse_uint8_prop", "modulename": "pyflp.flobject.flobject", "qualname": "FLObject.parse_uint8_prop", "type": "function", "doc": "<p><code>parseprop</code> for uint8 properties.</p>\n", "parameters": ["self", "event", "key"], "funcdef": "def"}, {"fullname": "pyflp.flobject.flobject.FLObject.parse_int8_prop", "modulename": "pyflp.flobject.flobject", "qualname": "FLObject.parse_int8_prop", "type": "function", "doc": "<p><code>parseprop</code> for int8 properties.</p>\n", "parameters": ["self", "event", "key"], "funcdef": "def"}, {"fullname": "pyflp.flobject.flobject.FLObject.parse_uint16_prop", "modulename": "pyflp.flobject.flobject", "qualname": "FLObject.parse_uint16_prop", "type": "function", "doc": "<p><code>parseprop</code> for uint16 properties.</p>\n", "parameters": ["self", "event", "key"], "funcdef": "def"}, {"fullname": "pyflp.flobject.flobject.FLObject.parse_int16_prop", "modulename": "pyflp.flobject.flobject", "qualname": "FLObject.parse_int16_prop", "type": "function", "doc": "<p><code>parseprop</code> for int16 properties.</p>\n", "parameters": ["self", "event", "key"], "funcdef": "def"}, {"fullname": "pyflp.flobject.flobject.FLObject.parse_uint32_prop", "modulename": "pyflp.flobject.flobject", "qualname": "FLObject.parse_uint32_prop", "type": "function", "doc": "<p><code>parseprop</code> for uint32 properties.</p>\n", "parameters": ["self", "event", "key"], "funcdef": "def"}, {"fullname": "pyflp.flobject.flobject.FLObject.parse_int32_prop", "modulename": "pyflp.flobject.flobject", "qualname": "FLObject.parse_int32_prop", "type": "function", "doc": "<p><code>parseprop</code> for int32 properties.</p>\n", "parameters": ["self", "event", "key"], "funcdef": "def"}, {"fullname": "pyflp.flobject.flobject.FLObject.parse_str_prop", "modulename": "pyflp.flobject.flobject", "qualname": "FLObject.parse_str_prop", "type": "function", "doc": "<p><code>parseprop</code> for string properties.</p>\n", "parameters": ["self", "event", "key"], "funcdef": "def"}, {"fullname": "pyflp.flobject.flobject.FLObject.save", "modulename": "pyflp.flobject.flobject", "qualname": "FLObject.save", "type": "function", "doc": "<p>Returns the events stored in <code>_events</code>.</p>\n\n<p>When overriden a List should be returned instead of ValuesView.</p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "pyflp.flobject.insert", "modulename": "pyflp.flobject.insert", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "pyflp.flobject.insert.event_id", "modulename": "pyflp.flobject.insert.event_id", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "pyflp.flobject.insert.event_id.InsertEventID", "modulename": "pyflp.flobject.insert.event_id", "qualname": "InsertEventID", "type": "class", "doc": "<p>An enumeration.</p>\n"}, {"fullname": "pyflp.flobject.insert.event_id.InsertEventID.Parameters", "modulename": "pyflp.flobject.insert.event_id", "qualname": "InsertEventID.Parameters", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "pyflp.flobject.insert.event_id.InsertEventID.Routing", "modulename": "pyflp.flobject.insert.event_id", "qualname": "InsertEventID.Routing", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "pyflp.flobject.insert.event_id.InsertEventID.Input", "modulename": "pyflp.flobject.insert.event_id", "qualname": "InsertEventID.Input", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "pyflp.flobject.insert.event_id.InsertEventID.Output", "modulename": "pyflp.flobject.insert.event_id", "qualname": "InsertEventID.Output", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "pyflp.flobject.insert.event_id.InsertEventID.Color", "modulename": "pyflp.flobject.insert.event_id", "qualname": "InsertEventID.Color", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "pyflp.flobject.insert.event_id.InsertEventID.Icon", "modulename": "pyflp.flobject.insert.event_id", "qualname": "InsertEventID.Icon", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "pyflp.flobject.insert.event_id.InsertEventID.Name", "modulename": "pyflp.flobject.insert.event_id", "qualname": "InsertEventID.Name", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "pyflp.flobject.insert.event_id.InsertSlotEventID", "modulename": "pyflp.flobject.insert.event_id", "qualname": "InsertSlotEventID", "type": "class", "doc": "<p>An enumeration.</p>\n"}, {"fullname": "pyflp.flobject.insert.event_id.InsertSlotEventID.DefaultName", "modulename": "pyflp.flobject.insert.event_id", "qualname": "InsertSlotEventID.DefaultName", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "pyflp.flobject.insert.event_id.InsertSlotEventID.PluginNew", "modulename": "pyflp.flobject.insert.event_id", "qualname": "InsertSlotEventID.PluginNew", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "pyflp.flobject.insert.event_id.InsertSlotEventID.Icon", "modulename": "pyflp.flobject.insert.event_id", "qualname": "InsertSlotEventID.Icon", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "pyflp.flobject.insert.event_id.InsertSlotEventID.Color", "modulename": "pyflp.flobject.insert.event_id", "qualname": "InsertSlotEventID.Color", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "pyflp.flobject.insert.event_id.InsertSlotEventID.Plugin", "modulename": "pyflp.flobject.insert.event_id", "qualname": "InsertSlotEventID.Plugin", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "pyflp.flobject.insert.event_id.InsertSlotEventID.Index", "modulename": "pyflp.flobject.insert.event_id", "qualname": "InsertSlotEventID.Index", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "pyflp.flobject.insert.insert", "modulename": "pyflp.flobject.insert.insert", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "pyflp.flobject.insert.insert.Insert", "modulename": "pyflp.flobject.insert.insert", "qualname": "Insert", "type": "class", "doc": "<p>Abstract base class for the FLP object model.</p>\n\n<p>Rules for subclassing:</p>\n\n<ol>\n<li>__init__() should call super().__init__() before anything</li>\n<li>Use self._log for logging, no module-level logging</li>\n<li>Set <code>_count</code> = 0</li>\n<li>Set <code>max_count</code> wherever applicable</li>\n</ol>\n"}, {"fullname": "pyflp.flobject.insert.insert.Insert.__init__", "modulename": "pyflp.flobject.insert.insert", "qualname": "Insert.__init__", "type": "function", "doc": "<p></p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "pyflp.flobject.insert.insert.Insert.max_count", "modulename": "pyflp.flobject.insert.insert", "qualname": "Insert.max_count", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "pyflp.flobject.insert.insert.Insert.name", "modulename": "pyflp.flobject.insert.insert", "qualname": "Insert.name", "type": "variable", "doc": "<p>Name of the insert. Event not stored if name not set.</p>\n"}, {"fullname": "pyflp.flobject.insert.insert.Insert.routing", "modulename": "pyflp.flobject.insert.insert", "qualname": "Insert.routing", "type": "variable", "doc": "<p>An order collection of booleans, representing how this <code>Insert</code> is routed.\nSo if the sequence is [0, 1, 1, 0, ...], then this <code>Insert</code> is routed to Insert 2, 3.</p>\n"}, {"fullname": "pyflp.flobject.insert.insert.Insert.icon", "modulename": "pyflp.flobject.insert.insert", "qualname": "Insert.icon", "type": "variable", "doc": "<p>Icon of the insert. Default event is not stored.</p>\n"}, {"fullname": "pyflp.flobject.insert.insert.Insert.input", "modulename": "pyflp.flobject.insert.insert", "qualname": "Insert.input", "type": "variable", "doc": "<p>Default event is stored.</p>\n"}, {"fullname": "pyflp.flobject.insert.insert.Insert.output", "modulename": "pyflp.flobject.insert.insert", "qualname": "Insert.output", "type": "variable", "doc": "<p>Default event is stored.</p>\n"}, {"fullname": "pyflp.flobject.insert.insert.Insert.color", "modulename": "pyflp.flobject.insert.insert", "qualname": "Insert.color", "type": "variable", "doc": "<p>Color of the insert. Default event is not stored.</p>\n"}, {"fullname": "pyflp.flobject.insert.insert.Insert.flags", "modulename": "pyflp.flobject.insert.insert", "qualname": "Insert.flags", "type": "variable", "doc": "<p>Stored in a <code>InsertEventID.Parameters</code> event. Default event is stored</p>\n"}, {"fullname": "pyflp.flobject.insert.insert.Insert.slots", "modulename": "pyflp.flobject.insert.insert", "qualname": "Insert.slots", "type": "variable", "doc": "<p>Holds :class:<code>InsertSlot</code>s (empty and used).</p>\n"}, {"fullname": "pyflp.flobject.insert.insert.Insert.enabled", "modulename": "pyflp.flobject.insert.insert", "qualname": "Insert.enabled", "type": "variable", "doc": "<p>Whether :class:<code>Insert</code> is enabled in the mixer. Obatined from :class:<code>InsertParamsEvent</code>.</p>\n"}, {"fullname": "pyflp.flobject.insert.insert.Insert.volume", "modulename": "pyflp.flobject.insert.insert", "qualname": "Insert.volume", "type": "variable", "doc": "<p>Fader value. Obatined from :class:<code>InsertParamsEvent</code>.</p>\n"}, {"fullname": "pyflp.flobject.insert.insert.Insert.pan", "modulename": "pyflp.flobject.insert.insert", "qualname": "Insert.pan", "type": "variable", "doc": "<p>Obatined from :class:<code>InsertParamsEvent</code>.</p>\n"}, {"fullname": "pyflp.flobject.insert.insert.Insert.stereo_separation", "modulename": "pyflp.flobject.insert.insert", "qualname": "Insert.stereo_separation", "type": "variable", "doc": "<p>Obatined from :class:<code>InsertParamsEvent</code>.</p>\n"}, {"fullname": "pyflp.flobject.insert.insert.Insert.eq", "modulename": "pyflp.flobject.insert.insert", "qualname": "Insert.eq", "type": "variable", "doc": "<p>3-band post EQ. Obatined from :class:<code>InsertParamsEvent</code>.</p>\n"}, {"fullname": "pyflp.flobject.insert.insert.Insert.route_volumes", "modulename": "pyflp.flobject.insert.insert", "qualname": "Insert.route_volumes", "type": "variable", "doc": "<p>Like :param:<code>routing</code>, stores an ordered collection of route volumes.\nObatined from :class:<code>InsertParamsEvent</code>.</p>\n"}, {"fullname": "pyflp.flobject.insert.insert.Insert.locked", "modulename": "pyflp.flobject.insert.insert", "qualname": "Insert.locked", "type": "variable", "doc": "<p>Obatined from :class:<code>InsertParamsEvent</code>.</p>\n"}, {"fullname": "pyflp.flobject.insert.insert.Insert.parse", "modulename": "pyflp.flobject.insert.insert", "qualname": "Insert.parse", "type": "function", "doc": "<p>Adds and parses an event from the event store.</p>\n\n<p>Uses delegate methods <code>_parse_byte_event</code>, <code>_parse_word_event</code>,\n<code>_parse_dword_event</code>, <code>_parse_text_event</code> and <code>_parse_data_event</code>.</p>\n\n<p>Can be overriden when a derived class contains properties holding\nFLObject derived classes, for e.g. <code>pyflp.flobject.insert.insert.Insert.slots</code>\nholds <code>List[pyflp.flobject.insert.insert_slot.InsertSlot]</code> and whenever the\nevent ID belongs to <code>pyflp.flobject.insert.event_id.InsertSlotEventID</code>,\nit is passed to the slot's <code>parse()</code> method directly.</p>\n\n<p>Args:\n    event (Event): Event to send to <code>parseprop</code>.</p>\n", "parameters": ["self", "event"], "funcdef": "def"}, {"fullname": "pyflp.flobject.insert.insert.Insert.save", "modulename": "pyflp.flobject.insert.insert", "qualname": "Insert.save", "type": "function", "doc": "<p>Returns the events stored in <code>_events</code>.</p>\n\n<p>When overriden a List should be returned instead of ValuesView.</p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "pyflp.flobject.insert.insert_params_event", "modulename": "pyflp.flobject.insert.insert_params_event", "qualname": "", "type": "module", "doc": "<p>Parses insert params event. Occurs after all insert events.</p>\n"}, {"fullname": "pyflp.flobject.insert.insert_params_event.InsertParamsEvent", "modulename": "pyflp.flobject.insert.insert_params_event", "qualname": "InsertParamsEvent", "type": "class", "doc": "<p>Represents a variable sized event used for storing a blob of data,\nconsists of a collection of POD types like int, bool, float, sometimes ASCII strings.\nIts size is determined by the event and also FL version sometimes.\nThe task of parsing is completely handled by one of the FLObject subclasses,\nhence no <code>to_*</code> conversion method is provided.</p>\n\n<pre><code>Raises:\n        TypeError &amp; ValueError\n</code></pre>\n"}, {"fullname": "pyflp.flobject.insert.insert_params_event.InsertParamsEvent.__init__", "modulename": "pyflp.flobject.insert.insert_params_event", "qualname": "InsertParamsEvent.__init__", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "data"], "funcdef": "def"}, {"fullname": "pyflp.flobject.insert.insert_params_event.InsertParamsEvent.ID", "modulename": "pyflp.flobject.insert.insert_params_event", "qualname": "InsertParamsEvent.ID", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "pyflp.flobject.insert.insert_params_event.InsertParamsEvent.parse", "modulename": "pyflp.flobject.insert.insert_params_event", "qualname": "InsertParamsEvent.parse", "type": "function", "doc": "<p>Returns <code>False</code> if validation fails</p>\n", "parameters": ["self", "inserts"], "funcdef": "def"}, {"fullname": "pyflp.flobject.insert.insertslot", "modulename": "pyflp.flobject.insert.insertslot", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "pyflp.flobject.insert.insertslot.InsertSlot", "modulename": "pyflp.flobject.insert.insertslot", "qualname": "InsertSlot", "type": "class", "doc": "<p>Abstract base class for the FLP object model.</p>\n\n<p>Rules for subclassing:</p>\n\n<ol>\n<li>__init__() should call super().__init__() before anything</li>\n<li>Use self._log for logging, no module-level logging</li>\n<li>Set <code>_count</code> = 0</li>\n<li>Set <code>max_count</code> wherever applicable</li>\n</ol>\n"}, {"fullname": "pyflp.flobject.insert.insertslot.InsertSlot.__init__", "modulename": "pyflp.flobject.insert.insertslot", "qualname": "InsertSlot.__init__", "type": "function", "doc": "<p></p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "pyflp.flobject.insert.insertslot.InsertSlot.max_count", "modulename": "pyflp.flobject.insert.insertslot", "qualname": "InsertSlot.max_count", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "pyflp.flobject.insert.insertslot.InsertSlot.default_name", "modulename": "pyflp.flobject.insert.insertslot", "qualname": "InsertSlot.default_name", "type": "variable", "doc": "<p>'Fruity Wrapper' for VST/AU plugins. Actual name for native plugins.</p>\n"}, {"fullname": "pyflp.flobject.insert.insertslot.InsertSlot.icon", "modulename": "pyflp.flobject.insert.insertslot", "qualname": "InsertSlot.icon", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "pyflp.flobject.insert.insertslot.InsertSlot.color", "modulename": "pyflp.flobject.insert.insertslot", "qualname": "InsertSlot.color", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "pyflp.flobject.insert.insertslot.InsertSlot.index", "modulename": "pyflp.flobject.insert.insertslot", "qualname": "InsertSlot.index", "type": "variable", "doc": "<p>Index (FL12.3+) of a slot, occurs irrespective of whether the slot is used or not.</p>\n"}, {"fullname": "pyflp.flobject.insert.insertslot.InsertSlot.enabled", "modulename": "pyflp.flobject.insert.insertslot", "qualname": "InsertSlot.enabled", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "pyflp.flobject.insert.insertslot.InsertSlot.mix", "modulename": "pyflp.flobject.insert.insertslot", "qualname": "InsertSlot.mix", "type": "variable", "doc": "<p>Dry/Wet mix</p>\n"}, {"fullname": "pyflp.flobject.insert.insertslot.InsertSlot.plugin", "modulename": "pyflp.flobject.insert.insertslot", "qualname": "InsertSlot.plugin", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "pyflp.flobject.insert.insertslot.InsertSlot.new", "modulename": "pyflp.flobject.insert.insertslot", "qualname": "InsertSlot.new", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "pyflp.flobject.insert.insertslot.InsertSlot.save", "modulename": "pyflp.flobject.insert.insertslot", "qualname": "InsertSlot.save", "type": "function", "doc": "<p>Returns the events stored in <code>_events</code>.</p>\n\n<p>When overriden a List should be returned instead of ValuesView.</p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "pyflp.flobject.insert.insertslot.InsertSlot.is_used", "modulename": "pyflp.flobject.insert.insertslot", "qualname": "InsertSlot.is_used", "type": "function", "doc": "<p>Whether a slot is used or empty. Decided by the presence of <code>InsertSlotEventID.New</code> event</p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "pyflp.flobject.misc", "modulename": "pyflp.flobject.misc", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "pyflp.flobject.misc.event_id", "modulename": "pyflp.flobject.misc.event_id", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "pyflp.flobject.misc.event_id.MiscEventID", "modulename": "pyflp.flobject.misc.event_id", "qualname": "MiscEventID", "type": "class", "doc": "<p>An enumeration.</p>\n"}, {"fullname": "pyflp.flobject.misc.event_id.MiscEventID.Version", "modulename": "pyflp.flobject.misc.event_id", "qualname": "MiscEventID.Version", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "pyflp.flobject.misc.event_id.MiscEventID.VersionBuild", "modulename": "pyflp.flobject.misc.event_id", "qualname": "MiscEventID.VersionBuild", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "pyflp.flobject.misc.event_id.MiscEventID.LoopActive", "modulename": "pyflp.flobject.misc.event_id", "qualname": "MiscEventID.LoopActive", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "pyflp.flobject.misc.event_id.MiscEventID.ShowInfo", "modulename": "pyflp.flobject.misc.event_id", "qualname": "MiscEventID.ShowInfo", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "pyflp.flobject.misc.event_id.MiscEventID.Shuffle", "modulename": "pyflp.flobject.misc.event_id", "qualname": "MiscEventID.Shuffle", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "pyflp.flobject.misc.event_id.MiscEventID.TimeSigNum", "modulename": "pyflp.flobject.misc.event_id", "qualname": "MiscEventID.TimeSigNum", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "pyflp.flobject.misc.event_id.MiscEventID.TimeSigBeat", "modulename": "pyflp.flobject.misc.event_id", "qualname": "MiscEventID.TimeSigBeat", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "pyflp.flobject.misc.event_id.MiscEventID.PanningLaw", "modulename": "pyflp.flobject.misc.event_id", "qualname": "MiscEventID.PanningLaw", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "pyflp.flobject.misc.event_id.MiscEventID.PlayTruncatedNotes", "modulename": "pyflp.flobject.misc.event_id", "qualname": "MiscEventID.PlayTruncatedNotes", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "pyflp.flobject.misc.event_id.MiscEventID.CurrentPatternNum", "modulename": "pyflp.flobject.misc.event_id", "qualname": "MiscEventID.CurrentPatternNum", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "pyflp.flobject.misc.event_id.MiscEventID.CurrentFilterChannelNum", "modulename": "pyflp.flobject.misc.event_id", "qualname": "MiscEventID.CurrentFilterChannelNum", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "pyflp.flobject.misc.event_id.MiscEventID.SongLoopPos", "modulename": "pyflp.flobject.misc.event_id", "qualname": "MiscEventID.SongLoopPos", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "pyflp.flobject.misc.event_id.MiscEventID.Tempo", "modulename": "pyflp.flobject.misc.event_id", "qualname": "MiscEventID.Tempo", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "pyflp.flobject.misc.event_id.MiscEventID.Title", "modulename": "pyflp.flobject.misc.event_id", "qualname": "MiscEventID.Title", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "pyflp.flobject.misc.event_id.MiscEventID.Comment", "modulename": "pyflp.flobject.misc.event_id", "qualname": "MiscEventID.Comment", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "pyflp.flobject.misc.event_id.MiscEventID.Url", "modulename": "pyflp.flobject.misc.event_id", "qualname": "MiscEventID.Url", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "pyflp.flobject.misc.event_id.MiscEventID.RegName", "modulename": "pyflp.flobject.misc.event_id", "qualname": "MiscEventID.RegName", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "pyflp.flobject.misc.event_id.MiscEventID.DataPath", "modulename": "pyflp.flobject.misc.event_id", "qualname": "MiscEventID.DataPath", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "pyflp.flobject.misc.event_id.MiscEventID.Genre", "modulename": "pyflp.flobject.misc.event_id", "qualname": "MiscEventID.Genre", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "pyflp.flobject.misc.event_id.MiscEventID.Artists", "modulename": "pyflp.flobject.misc.event_id", "qualname": "MiscEventID.Artists", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "pyflp.flobject.misc.event_id.MiscEventID.SaveTimestamp", "modulename": "pyflp.flobject.misc.event_id", "qualname": "MiscEventID.SaveTimestamp", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "pyflp.flobject.misc.misc", "modulename": "pyflp.flobject.misc.misc", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "pyflp.flobject.misc.misc.Misc", "modulename": "pyflp.flobject.misc.misc", "qualname": "Misc", "type": "class", "doc": "<p>Used for storing one time events, which don't fall into any other category.</p>\n"}, {"fullname": "pyflp.flobject.misc.misc.Misc.__init__", "modulename": "pyflp.flobject.misc.misc", "qualname": "Misc.__init__", "type": "function", "doc": "<p></p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "pyflp.flobject.misc.misc.Misc.max_count", "modulename": "pyflp.flobject.misc.misc", "qualname": "Misc.max_count", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "pyflp.flobject.misc.misc.Misc.ppq", "modulename": "pyflp.flobject.misc.misc", "qualname": "Misc.ppq", "type": "variable", "doc": "<p>Pulses Per Quarter</p>\n"}, {"fullname": "pyflp.flobject.misc.misc.Misc.format", "modulename": "pyflp.flobject.misc.misc", "qualname": "Misc.format", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "pyflp.flobject.misc.misc.Misc.channel_count", "modulename": "pyflp.flobject.misc.misc", "qualname": "Misc.channel_count", "type": "variable", "doc": "<p>Total number of channels in the rack.</p>\n"}, {"fullname": "pyflp.flobject.misc.misc.Misc.loop_active", "modulename": "pyflp.flobject.misc.misc", "qualname": "Misc.loop_active", "type": "variable", "doc": "<p>Whether a portion of the song is selected.</p>\n"}, {"fullname": "pyflp.flobject.misc.misc.Misc.show_info", "modulename": "pyflp.flobject.misc.misc", "qualname": "Misc.show_info", "type": "variable", "doc": "<p>Project info -> Show info on opening</p>\n"}, {"fullname": "pyflp.flobject.misc.misc.Misc.title", "modulename": "pyflp.flobject.misc.misc", "qualname": "Misc.title", "type": "variable", "doc": "<p>Project info -> Title</p>\n"}, {"fullname": "pyflp.flobject.misc.misc.Misc.comment", "modulename": "pyflp.flobject.misc.misc", "qualname": "Misc.comment", "type": "variable", "doc": "<p>Project info -> Comments</p>\n"}, {"fullname": "pyflp.flobject.misc.misc.Misc.url", "modulename": "pyflp.flobject.misc.misc", "qualname": "Misc.url", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "pyflp.flobject.misc.misc.Misc.version", "modulename": "pyflp.flobject.misc.misc", "qualname": "Misc.version", "type": "variable", "doc": "<p>FL Studio version which was used to save the FLP.\nChanging this to a lower version will not make an FLP load magically\ninside FL Studio, as newer events and/or plugins might have been used.</p>\n\n<p>Returns:\n    Optional[str]: A string of the format 'Major.Minor.Revision.Build'.</p>\n"}, {"fullname": "pyflp.flobject.misc.misc.Misc.regname", "modulename": "pyflp.flobject.misc.misc", "qualname": "Misc.regname", "type": "variable", "doc": "<p>Jumbled up (encrypted maybe) name of the artist's FL Studio username.\nCan find it out decoded in Debug log section of FL.</p>\n\n<p><em>Most pirated versions of FL cause this to be empty.\nIL can then detect projects made from cracked FL easily.</em></p>\n"}, {"fullname": "pyflp.flobject.misc.misc.Misc.data_path", "modulename": "pyflp.flobject.misc.misc", "qualname": "Misc.data_path", "type": "variable", "doc": "<p>Project settings -> Data folder</p>\n"}, {"fullname": "pyflp.flobject.misc.misc.Misc.genre", "modulename": "pyflp.flobject.misc.misc", "qualname": "Misc.genre", "type": "variable", "doc": "<p>Project info -> Genre</p>\n"}, {"fullname": "pyflp.flobject.misc.misc.Misc.artists", "modulename": "pyflp.flobject.misc.misc", "qualname": "Misc.artists", "type": "variable", "doc": "<p>Project info -> Author.</p>\n"}, {"fullname": "pyflp.flobject.misc.misc.Misc.tempo", "modulename": "pyflp.flobject.misc.misc", "qualname": "Misc.tempo", "type": "variable", "doc": "<p>Initial tempo of the project in BPM.</p>\n"}, {"fullname": "pyflp.flobject.misc.misc.Misc.start_date", "modulename": "pyflp.flobject.misc.misc", "qualname": "Misc.start_date", "type": "variable", "doc": "<p>The date when the project was started. Stored in microseconds since Delphi epoch (31-December-1899).</p>\n"}, {"fullname": "pyflp.flobject.misc.misc.Misc.work_time", "modulename": "pyflp.flobject.misc.misc", "qualname": "Misc.work_time", "type": "variable", "doc": "<p>The total amount of time the artist(s) worked on the project. Stored in microseconds.</p>\n"}, {"fullname": "pyflp.flobject.misc.misc.Misc.version_build", "modulename": "pyflp.flobject.misc.misc", "qualname": "Misc.version_build", "type": "variable", "doc": "<p><code>pyflp.utils.FLVersion.build</code> stored as an integer, idk for what reason,\nthe <code>MiscEventID.Version</code> event already stores it.</p>\n"}, {"fullname": "pyflp.flobject.misc.misc.Misc.current_pattern_num", "modulename": "pyflp.flobject.misc.misc", "qualname": "Misc.current_pattern_num", "type": "variable", "doc": "<p>Currently selected pattern number.</p>\n"}, {"fullname": "pyflp.flobject.misc.misc.Misc.current_filterchannel_num", "modulename": "pyflp.flobject.misc.misc", "qualname": "Misc.current_filterchannel_num", "type": "variable", "doc": "<p>Currently selected filter channel number.</p>\n"}, {"fullname": "pyflp.flobject.misc.misc.Misc.panning_law", "modulename": "pyflp.flobject.misc.misc", "qualname": "Misc.panning_law", "type": "variable", "doc": "<p>Project settings -> Advanced -> Panning law.</p>\n"}, {"fullname": "pyflp.flobject.misc.misc.Misc.time_sig_num", "modulename": "pyflp.flobject.misc.misc", "qualname": "Misc.time_sig_num", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "pyflp.flobject.misc.misc.Misc.time_sig_beat", "modulename": "pyflp.flobject.misc.misc", "qualname": "Misc.time_sig_beat", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "pyflp.flobject.misc.misc.Misc.song_loop_pos", "modulename": "pyflp.flobject.misc.misc", "qualname": "Misc.song_loop_pos", "type": "variable", "doc": "<p>If a portion of a song is selected, it is stored as 4 byte integer,\n2b for loop start position and 2b for loop end position, TODO a tuple for this.</p>\n"}, {"fullname": "pyflp.flobject.misc.misc.Misc.play_truncated_notes", "modulename": "pyflp.flobject.misc.misc", "qualname": "Misc.play_truncated_notes", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "pyflp.flobject.misc.misc.Misc.shuffle", "modulename": "pyflp.flobject.misc.misc", "qualname": "Misc.shuffle", "type": "variable", "doc": "<p>Global channel swing mix (ig).</p>\n"}, {"fullname": "pyflp.flobject.misc.misc.Misc.save", "modulename": "pyflp.flobject.misc.misc", "qualname": "Misc.save", "type": "function", "doc": "<p>Returns the events stored in <code>_events</code>.</p>\n\n<p>When overriden a List should be returned instead of ValuesView.</p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "pyflp.flobject.pattern", "modulename": "pyflp.flobject.pattern", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "pyflp.flobject.pattern.event_id", "modulename": "pyflp.flobject.pattern.event_id", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "pyflp.flobject.pattern.event_id.PatternEventID", "modulename": "pyflp.flobject.pattern.event_id", "qualname": "PatternEventID", "type": "class", "doc": "<p>An enumeration.</p>\n"}, {"fullname": "pyflp.flobject.pattern.event_id.PatternEventID.New", "modulename": "pyflp.flobject.pattern.event_id", "qualname": "PatternEventID.New", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "pyflp.flobject.pattern.event_id.PatternEventID.Color", "modulename": "pyflp.flobject.pattern.event_id", "qualname": "PatternEventID.Color", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "pyflp.flobject.pattern.event_id.PatternEventID.Name", "modulename": "pyflp.flobject.pattern.event_id", "qualname": "PatternEventID.Name", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "pyflp.flobject.pattern.event_id.PatternEventID.Notes", "modulename": "pyflp.flobject.pattern.event_id", "qualname": "PatternEventID.Notes", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "pyflp.flobject.pattern.note", "modulename": "pyflp.flobject.pattern.note", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "pyflp.flobject.pattern.note.Note", "modulename": "pyflp.flobject.pattern.note", "qualname": "Note", "type": "class", "doc": "<p>Represents a MIDI event (note) in a :type:<code>Pattern</code>.</p>\n"}, {"fullname": "pyflp.flobject.pattern.note.Note.__init__", "modulename": "pyflp.flobject.pattern.note", "qualname": "Note.__init__", "type": "function", "doc": "<p></p>\n", "parameters": [], "funcdef": "def"}, {"fullname": "pyflp.flobject.pattern.note.Note.position", "modulename": "pyflp.flobject.pattern.note", "qualname": "Note.position", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "pyflp.flobject.pattern.note.Note.flags", "modulename": "pyflp.flobject.pattern.note", "qualname": "Note.flags", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "pyflp.flobject.pattern.note.Note.rack_channel", "modulename": "pyflp.flobject.pattern.note", "qualname": "Note.rack_channel", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "pyflp.flobject.pattern.note.Note.duration", "modulename": "pyflp.flobject.pattern.note", "qualname": "Note.duration", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "pyflp.flobject.pattern.note.Note.key", "modulename": "pyflp.flobject.pattern.note", "qualname": "Note.key", "type": "variable", "doc": "<p>0-131 for C0-B10. Yet 4-bytes, to save stamped chords/scales</p>\n"}, {"fullname": "pyflp.flobject.pattern.note.Note.fine_pitch", "modulename": "pyflp.flobject.pattern.note", "qualname": "Note.fine_pitch", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "pyflp.flobject.pattern.note.Note.release", "modulename": "pyflp.flobject.pattern.note", "qualname": "Note.release", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "pyflp.flobject.pattern.note.Note.midi_channel", "modulename": "pyflp.flobject.pattern.note", "qualname": "Note.midi_channel", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "pyflp.flobject.pattern.note.Note.pan", "modulename": "pyflp.flobject.pattern.note", "qualname": "Note.pan", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "pyflp.flobject.pattern.note.Note.velocity", "modulename": "pyflp.flobject.pattern.note", "qualname": "Note.velocity", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "pyflp.flobject.pattern.note.Note.mod_x", "modulename": "pyflp.flobject.pattern.note", "qualname": "Note.mod_x", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "pyflp.flobject.pattern.note.Note.mod_y", "modulename": "pyflp.flobject.pattern.note", "qualname": "Note.mod_y", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "pyflp.flobject.pattern.note.Note.parse", "modulename": "pyflp.flobject.pattern.note", "qualname": "Note.parse", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "data"], "funcdef": "def"}, {"fullname": "pyflp.flobject.pattern.note.Note.save", "modulename": "pyflp.flobject.pattern.note", "qualname": "Note.save", "type": "function", "doc": "<p></p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "pyflp.flobject.pattern.pattern", "modulename": "pyflp.flobject.pattern.pattern", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "pyflp.flobject.pattern.pattern.Pattern", "modulename": "pyflp.flobject.pattern.pattern", "qualname": "Pattern", "type": "class", "doc": "<p>Abstract base class for the FLP object model.</p>\n\n<p>Rules for subclassing:</p>\n\n<ol>\n<li>__init__() should call super().__init__() before anything</li>\n<li>Use self._log for logging, no module-level logging</li>\n<li>Set <code>_count</code> = 0</li>\n<li>Set <code>max_count</code> wherever applicable</li>\n</ol>\n"}, {"fullname": "pyflp.flobject.pattern.pattern.Pattern.__init__", "modulename": "pyflp.flobject.pattern.pattern", "qualname": "Pattern.__init__", "type": "function", "doc": "<p></p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "pyflp.flobject.pattern.pattern.Pattern.NOTE_SIZE", "modulename": "pyflp.flobject.pattern.pattern", "qualname": "Pattern.NOTE_SIZE", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "pyflp.flobject.pattern.pattern.Pattern.name", "modulename": "pyflp.flobject.pattern.pattern", "qualname": "Pattern.name", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "pyflp.flobject.pattern.pattern.Pattern.color", "modulename": "pyflp.flobject.pattern.pattern", "qualname": "Pattern.color", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "pyflp.flobject.pattern.pattern.Pattern.index", "modulename": "pyflp.flobject.pattern.pattern", "qualname": "Pattern.index", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "pyflp.flobject.pattern.pattern.Pattern.notes", "modulename": "pyflp.flobject.pattern.pattern", "qualname": "Pattern.notes", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "pyflp.flobject.pattern.pattern.Pattern.save", "modulename": "pyflp.flobject.pattern.pattern", "qualname": "Pattern.save", "type": "function", "doc": "<p>Returns the events stored in <code>_events</code>.</p>\n\n<p>When overriden a List should be returned instead of ValuesView.</p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "pyflp.flobject.pattern.pattern.Pattern.is_empty", "modulename": "pyflp.flobject.pattern.pattern", "qualname": "Pattern.is_empty", "type": "function", "doc": "<p>Whether pattern has notes</p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "pyflp.flobject.plugin", "modulename": "pyflp.flobject.plugin", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "pyflp.flobject.plugin.effects", "modulename": "pyflp.flobject.plugin.effects", "qualname": "", "type": "module", "doc": "<p>Implementations of some stock FL Studio effect plugins</p>\n"}, {"fullname": "pyflp.flobject.plugin.effects.balance", "modulename": "pyflp.flobject.plugin.effects.balance", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "pyflp.flobject.plugin.effects.balance.FBalance", "modulename": "pyflp.flobject.plugin.effects.balance", "qualname": "FBalance", "type": "class", "doc": "<p>Implements Fruity Balance.</p>\n"}, {"fullname": "pyflp.flobject.plugin.effects.balance.FBalance.__init__", "modulename": "pyflp.flobject.plugin.effects.balance", "qualname": "FBalance.__init__", "type": "function", "doc": "<p></p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "pyflp.flobject.plugin.effects.balance.FBalance.pan", "modulename": "pyflp.flobject.plugin.effects.balance", "qualname": "FBalance.pan", "type": "variable", "doc": "<p>Linear. Min: -128, Max: 127, Default: 0 (0.50, Centred)</p>\n"}, {"fullname": "pyflp.flobject.plugin.effects.balance.FBalance.volume", "modulename": "pyflp.flobject.plugin.effects.balance", "qualname": "FBalance.volume", "type": "variable", "doc": "<p>Logarithmic. Min: 0, Max: 320, Default: 256 (0.80, 0dB)</p>\n"}, {"fullname": "pyflp.flobject.plugin.effects.notebook_2", "modulename": "pyflp.flobject.plugin.effects.notebook_2", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "pyflp.flobject.plugin.effects.notebook_2.FNoteBook2", "modulename": "pyflp.flobject.plugin.effects.notebook_2", "qualname": "FNoteBook2", "type": "class", "doc": "<p>Represents a native or VST2/VST3 effect.\nUsed by <code>pyflp.flobject.insert.insert_slot.InsertSlot.plugin</code>.</p>\n"}, {"fullname": "pyflp.flobject.plugin.effects.notebook_2.FNoteBook2.__init__", "modulename": "pyflp.flobject.plugin.effects.notebook_2", "qualname": "FNoteBook2.__init__", "type": "function", "doc": "<p></p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "pyflp.flobject.plugin.effects.notebook_2.FNoteBook2.pages", "modulename": "pyflp.flobject.plugin.effects.notebook_2", "qualname": "FNoteBook2.pages", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "pyflp.flobject.plugin.effects.notebook_2.FNoteBook2.active_page_number", "modulename": "pyflp.flobject.plugin.effects.notebook_2", "qualname": "FNoteBook2.active_page_number", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "pyflp.flobject.plugin.effects.notebook_2.FNoteBook2.editable", "modulename": "pyflp.flobject.plugin.effects.notebook_2", "qualname": "FNoteBook2.editable", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "pyflp.flobject.plugin.effects.soft_clipper", "modulename": "pyflp.flobject.plugin.effects.soft_clipper", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "pyflp.flobject.plugin.effects.soft_clipper.FSoftClipper", "modulename": "pyflp.flobject.plugin.effects.soft_clipper", "qualname": "FSoftClipper", "type": "class", "doc": "<p>Represents a native or VST2/VST3 effect.\nUsed by <code>pyflp.flobject.insert.insert_slot.InsertSlot.plugin</code>.</p>\n"}, {"fullname": "pyflp.flobject.plugin.effects.soft_clipper.FSoftClipper.__init__", "modulename": "pyflp.flobject.plugin.effects.soft_clipper", "qualname": "FSoftClipper.__init__", "type": "function", "doc": "<p></p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "pyflp.flobject.plugin.effects.soft_clipper.FSoftClipper.Default", "modulename": "pyflp.flobject.plugin.effects.soft_clipper", "qualname": "FSoftClipper.Default", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "pyflp.flobject.plugin.effects.soft_clipper.FSoftClipper.threshold", "modulename": "pyflp.flobject.plugin.effects.soft_clipper", "qualname": "FSoftClipper.threshold", "type": "variable", "doc": "<p>Logarithmic. Min: 1, Max: 127, Default: 100 (0.60, -4.4dB)</p>\n"}, {"fullname": "pyflp.flobject.plugin.effects.soft_clipper.FSoftClipper.post_gain", "modulename": "pyflp.flobject.plugin.effects.soft_clipper", "qualname": "FSoftClipper.post_gain", "type": "variable", "doc": "<p>Linear. Min: 0, Max: 160, Default: 128 (80%)</p>\n"}, {"fullname": "pyflp.flobject.plugin.effects.soundgoodizer", "modulename": "pyflp.flobject.plugin.effects.soundgoodizer", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "pyflp.flobject.plugin.effects.soundgoodizer.Soundgoodizer", "modulename": "pyflp.flobject.plugin.effects.soundgoodizer", "qualname": "Soundgoodizer", "type": "class", "doc": "<p>Implements Soundgoodizer.</p>\n"}, {"fullname": "pyflp.flobject.plugin.effects.soundgoodizer.Soundgoodizer.__init__", "modulename": "pyflp.flobject.plugin.effects.soundgoodizer", "qualname": "Soundgoodizer.__init__", "type": "function", "doc": "<p></p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "pyflp.flobject.plugin.effects.soundgoodizer.Soundgoodizer.mode", "modulename": "pyflp.flobject.plugin.effects.soundgoodizer", "qualname": "Soundgoodizer.mode", "type": "variable", "doc": "<p>A = 0, B = 1, C = 2, D = 3</p>\n"}, {"fullname": "pyflp.flobject.plugin.effects.soundgoodizer.Soundgoodizer.amount", "modulename": "pyflp.flobject.plugin.effects.soundgoodizer", "qualname": "Soundgoodizer.amount", "type": "variable", "doc": "<p>Logarithmic. Min: 0, Max: 1000, Default: 600</p>\n"}, {"fullname": "pyflp.flobject.plugin.plugin", "modulename": "pyflp.flobject.plugin.plugin", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "pyflp.flobject.plugin.plugin.Plugin", "modulename": "pyflp.flobject.plugin.plugin", "qualname": "Plugin", "type": "class", "doc": "<p>Represents a native or VST2/VST3 effect or instrument.</p>\n"}, {"fullname": "pyflp.flobject.plugin.plugin.Plugin.save", "modulename": "pyflp.flobject.plugin.plugin", "qualname": "Plugin.save", "type": "function", "doc": "<p>Returns the events stored in <code>_events</code>.</p>\n\n<p>When overriden a List should be returned instead of ValuesView.</p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "pyflp.flobject.plugin.plugin.EffectPlugin", "modulename": "pyflp.flobject.plugin.plugin", "qualname": "EffectPlugin", "type": "class", "doc": "<p>Represents a native or VST2/VST3 effect.\nUsed by <code>pyflp.flobject.insert.insert_slot.InsertSlot.plugin</code>.</p>\n"}, {"fullname": "pyflp.flobject.plugin.plugin.GeneratorPlugin", "modulename": "pyflp.flobject.plugin.plugin", "qualname": "GeneratorPlugin", "type": "class", "doc": "<p>Represents a native or VST2/VST3 instrument.\nUsed by <code>pyflp.flobject.channel.channel.Channel.plugin</code>.</p>\n"}, {"fullname": "pyflp.flobject.plugin.vst_plugin", "modulename": "pyflp.flobject.plugin.vst_plugin", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "pyflp.flobject.plugin.vst_plugin.PluginChunkEventID", "modulename": "pyflp.flobject.plugin.vst_plugin", "qualname": "PluginChunkEventID", "type": "class", "doc": "<p>An event inside event, again. Roughly in this order</p>\n"}, {"fullname": "pyflp.flobject.plugin.vst_plugin.PluginChunkEventID.MIDI", "modulename": "pyflp.flobject.plugin.vst_plugin", "qualname": "PluginChunkEventID.MIDI", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "pyflp.flobject.plugin.vst_plugin.PluginChunkEventID.Flags", "modulename": "pyflp.flobject.plugin.vst_plugin", "qualname": "PluginChunkEventID.Flags", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "pyflp.flobject.plugin.vst_plugin.PluginChunkEventID.IO", "modulename": "pyflp.flobject.plugin.vst_plugin", "qualname": "PluginChunkEventID.IO", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "pyflp.flobject.plugin.vst_plugin.PluginChunkEventID.InputInfo", "modulename": "pyflp.flobject.plugin.vst_plugin", "qualname": "PluginChunkEventID.InputInfo", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "pyflp.flobject.plugin.vst_plugin.PluginChunkEventID.OutputInfo", "modulename": "pyflp.flobject.plugin.vst_plugin", "qualname": "PluginChunkEventID.OutputInfo", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "pyflp.flobject.plugin.vst_plugin.PluginChunkEventID.PluginInfo", "modulename": "pyflp.flobject.plugin.vst_plugin", "qualname": "PluginChunkEventID.PluginInfo", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "pyflp.flobject.plugin.vst_plugin.PluginChunkEventID.VSTFourCC", "modulename": "pyflp.flobject.plugin.vst_plugin", "qualname": "PluginChunkEventID.VSTFourCC", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "pyflp.flobject.plugin.vst_plugin.PluginChunkEventID.GUID", "modulename": "pyflp.flobject.plugin.vst_plugin", "qualname": "PluginChunkEventID.GUID", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "pyflp.flobject.plugin.vst_plugin.PluginChunkEventID.Name", "modulename": "pyflp.flobject.plugin.vst_plugin", "qualname": "PluginChunkEventID.Name", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "pyflp.flobject.plugin.vst_plugin.PluginChunkEventID.PluginPath", "modulename": "pyflp.flobject.plugin.vst_plugin", "qualname": "PluginChunkEventID.PluginPath", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "pyflp.flobject.plugin.vst_plugin.PluginChunkEventID.Vendor", "modulename": "pyflp.flobject.plugin.vst_plugin", "qualname": "PluginChunkEventID.Vendor", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "pyflp.flobject.plugin.vst_plugin.PluginChunkEventID.State", "modulename": "pyflp.flobject.plugin.vst_plugin", "qualname": "PluginChunkEventID.State", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "pyflp.flobject.plugin.vst_plugin.PluginIOInfo", "modulename": "pyflp.flobject.plugin.vst_plugin", "qualname": "PluginIOInfo", "type": "class", "doc": "<p>PluginIOInfo()</p>\n"}, {"fullname": "pyflp.flobject.plugin.vst_plugin.PluginIOInfo.__init__", "modulename": "pyflp.flobject.plugin.vst_plugin", "qualname": "PluginIOInfo.__init__", "type": "function", "doc": "<p></p>\n", "parameters": [], "funcdef": "def"}, {"fullname": "pyflp.flobject.plugin.vst_plugin.VSTPlugin", "modulename": "pyflp.flobject.plugin.vst_plugin", "qualname": "VSTPlugin", "type": "class", "doc": "<p>Parses a VST2/3 plugin (including Waveshells) data \n(ChannelEventID.PluginData &amp; InsertSlotEventID.PluginData event)</p>\n"}, {"fullname": "pyflp.flobject.plugin.vst_plugin.VSTPlugin.midi_in_port", "modulename": "pyflp.flobject.plugin.vst_plugin", "qualname": "VSTPlugin.midi_in_port", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "pyflp.flobject.plugin.vst_plugin.VSTPlugin.midi_out_port", "modulename": "pyflp.flobject.plugin.vst_plugin", "qualname": "VSTPlugin.midi_out_port", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "pyflp.flobject.plugin.vst_plugin.VSTPlugin.pitch_bend_range", "modulename": "pyflp.flobject.plugin.vst_plugin", "qualname": "VSTPlugin.pitch_bend_range", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "pyflp.flobject.plugin.vst_plugin.VSTPlugin.flags", "modulename": "pyflp.flobject.plugin.vst_plugin", "qualname": "VSTPlugin.flags", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "pyflp.flobject.plugin.vst_plugin.VSTPlugin.num_inputs", "modulename": "pyflp.flobject.plugin.vst_plugin", "qualname": "VSTPlugin.num_inputs", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "pyflp.flobject.plugin.vst_plugin.VSTPlugin.num_outputs", "modulename": "pyflp.flobject.plugin.vst_plugin", "qualname": "VSTPlugin.num_outputs", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "pyflp.flobject.plugin.vst_plugin.VSTPlugin.input_info", "modulename": "pyflp.flobject.plugin.vst_plugin", "qualname": "VSTPlugin.input_info", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "pyflp.flobject.plugin.vst_plugin.VSTPlugin.output_info", "modulename": "pyflp.flobject.plugin.vst_plugin", "qualname": "VSTPlugin.output_info", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "pyflp.flobject.plugin.vst_plugin.VSTPlugin.vst_number", "modulename": "pyflp.flobject.plugin.vst_plugin", "qualname": "VSTPlugin.vst_number", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "pyflp.flobject.plugin.vst_plugin.VSTPlugin.vst_fourcc", "modulename": "pyflp.flobject.plugin.vst_plugin", "qualname": "VSTPlugin.vst_fourcc", "type": "variable", "doc": "<p>FourCC unique VST ID, as reserved by plugin dev</p>\n"}, {"fullname": "pyflp.flobject.plugin.vst_plugin.VSTPlugin.guid", "modulename": "pyflp.flobject.plugin.vst_plugin", "qualname": "VSTPlugin.guid", "type": "variable", "doc": "<p>Used by Waveshells to identify the correct plugin</p>\n"}, {"fullname": "pyflp.flobject.plugin.vst_plugin.VSTPlugin.data", "modulename": "pyflp.flobject.plugin.vst_plugin", "qualname": "VSTPlugin.data", "type": "variable", "doc": "<p>The actual plugin data</p>\n"}, {"fullname": "pyflp.flobject.plugin.vst_plugin.VSTPlugin.name", "modulename": "pyflp.flobject.plugin.vst_plugin", "qualname": "VSTPlugin.name", "type": "variable", "doc": "<p>User set name for native plugins, real/user-set name for VSTs</p>\n"}, {"fullname": "pyflp.flobject.plugin.vst_plugin.VSTPlugin.plugin_path", "modulename": "pyflp.flobject.plugin.vst_plugin", "qualname": "VSTPlugin.plugin_path", "type": "variable", "doc": "<p>The absolute path to the plugin .dll on the artists' device.\nI really don't understand why this is required, FL already creates .fst\nwhen it discovers a plugin. Also VST plugins do have a unique FourCC.</p>\n"}, {"fullname": "pyflp.flobject.plugin.vst_plugin.VSTPlugin.vendor", "modulename": "pyflp.flobject.plugin.vst_plugin", "qualname": "VSTPlugin.vendor", "type": "variable", "doc": "<p>Plugin developer name</p>\n"}, {"fullname": "pyflp.parser", "modulename": "pyflp.parser", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "pyflp.parser.Parser", "modulename": "pyflp.parser", "qualname": "Parser", "type": "class", "doc": "<p></p>\n"}, {"fullname": "pyflp.parser.Parser.__init__", "modulename": "pyflp.parser", "qualname": "Parser.__init__", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "verbose"], "funcdef": "def"}, {"fullname": "pyflp.parser.Parser.INSERT_EVENTS", "modulename": "pyflp.parser", "qualname": "Parser.INSERT_EVENTS", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "pyflp.parser.Parser.ARRANGEMENT_EVENTS", "modulename": "pyflp.parser", "qualname": "Parser.ARRANGEMENT_EVENTS", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "pyflp.parser.Parser.parse", "modulename": "pyflp.parser", "qualname": "Parser.parse", "type": "function", "doc": "<p>Parses an FLP (stream, ZipFile or file), creates a :class:<code>Project</code> object and returns it.</p>\n", "parameters": ["self", "flp"], "funcdef": "def"}, {"fullname": "pyflp.parser.Parser.parse_zip", "modulename": "pyflp.parser", "qualname": "Parser.parse_zip", "type": "function", "doc": "<p>Parses an FLP inside a ZIP and returns a :class:<code>Project</code> object.</p>\n\n<p>:param zip_file: The path to the ZIP file or a :class:<code>zipfile.ZipFile</code>\n:param name: If the ZIP has multiple FLPs, you need to specify the name of the FLP to parse</p>\n", "parameters": ["self", "zip_file", "name"], "funcdef": "def"}, {"fullname": "pyflp.parser.Parser.events", "modulename": "pyflp.parser", "qualname": "Parser.events", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "pyflp.project", "modulename": "pyflp.project", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "pyflp.project.Project", "modulename": "pyflp.project", "qualname": "Project", "type": "class", "doc": "<p>Project(_verbose: bool)</p>\n"}, {"fullname": "pyflp.project.Project.__init__", "modulename": "pyflp.project", "qualname": "Project.__init__", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "_verbose"], "funcdef": "def"}, {"fullname": "pyflp.project.Project.used_insert_nums", "modulename": "pyflp.project", "qualname": "Project.used_insert_nums", "type": "function", "doc": "<p>Returns a <code>Set</code> of used <code>Insert</code> indexes.</p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "pyflp.project.Project.create_zip", "modulename": "pyflp.project", "qualname": "Project.create_zip", "type": "function", "doc": "<p>Equivalent to a \"ZIP looped package\" in FL Studio.</p>\n\n<p>Args:\n    path (Union[str, pathlib.Path], optional): The path to save the ZIP to. Defaults to ''.</p>\n\n<p>Raises:\n    AttributeError: When path is default and Project was created from a stream</p>\n", "parameters": ["self", "path"], "funcdef": "def"}, {"fullname": "pyflp.project.Project.get_stream", "modulename": "pyflp.project", "qualname": "Project.get_stream", "type": "function", "doc": "<p>Converts the list of events received from <code>self._save_state()</code> and headers into a single stream.\nTypically used directly when Project was parsed from a stream, i.e. save_path is not set.</p>\n\n<p>Returns:\n    bytes: The stream. Used by <code>save()</code></p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "pyflp.project.Project.save", "modulename": "pyflp.project", "qualname": "Project.save", "type": "function", "doc": "<p>Save <code>Project</code> to the disk.</p>\n\n<p>Args:\n    save_path (Union[pathlib.Path, str], optional): File path to save to. Defaults to ''.</p>\n\n<p>Raises:\n    AttributeError: When Project.save_path doesn't exist and save_path is not set\n    e: Exception which caused the write failed, most proably a permission/file-in-use error.</p>\n", "parameters": ["self", "save_path"], "funcdef": "def"}, {"fullname": "pyflp.utils", "modulename": "pyflp.utils", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "pyflp.utils.buflen_to_varint", "modulename": "pyflp.utils", "qualname": "buflen_to_varint", "type": "function", "doc": "<p></p>\n", "parameters": ["buffer"], "funcdef": "def"}, {"fullname": "pyflp.utils.FLVersion", "modulename": "pyflp.utils", "qualname": "FLVersion", "type": "class", "doc": "<p>FLVersion(string: str)</p>\n"}, {"fullname": "pyflp.utils.FLVersion.__init__", "modulename": "pyflp.utils", "qualname": "FLVersion.__init__", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "string"], "funcdef": "def"}, {"fullname": "pyflp.utils.FLVersion.as_float", "modulename": "pyflp.utils", "qualname": "FLVersion.as_float", "type": "function", "doc": "<p></p>\n", "parameters": ["self"], "funcdef": "def"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.addField("qualname");
            this.addField("fullname");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();